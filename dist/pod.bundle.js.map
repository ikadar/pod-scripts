{"version":3,"file":"pod.bundle.js","sources":["../src/separator.js","../src/render-template.js","../src/smart-caps.js","../src/conversion.js","../src/measurement.js","../src/squeeze/squeeze-font-size.js","../src/squeeze/squeeze-letter-spacing.js","../src/squeeze/squeeze-scaling.js","../src/squeeze.js","../src/post-msg-handler.js","../src/pod-template-scripts.js"],"sourcesContent":["import logInfo from \"./log-info\";\n\nconst handleSeparators = () => {\n\n    // logInfo(\"HANDLING SEPARATORS\");\n\n    const results = Array.from(document.querySelectorAll('[class*=\"separator-[\"]'))\n        .map(el => {\n            const m = el.className.match(/separator-\\[([^\\]]+)\\]/);\n            return m ? { element: el, value: m[1] } : null;\n        })\n        .filter(Boolean);\n\n    results.forEach(({ element, value }) => {\n        const textNodes = getAllTextNodes(element);\n        textNodes.forEach(node => wrapMatchesWithSeparatorAndSegments(node, value));\n    });\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                nextInNewLine = true;\n            }\n        }\n\n        if (prev) {\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                prevInNewLine = true;\n            }\n        }\n\n        if (nextInNewLine) {\n            separator.style.visibility = \"hidden\";\n        } else {\n            separator.style.visibility = \"visible\";\n        }\n\n        if (prevInNewLine) {\n            separator.style.display = \"none\";\n        } else {\n            separator.style.display = \"inline\";\n        }\n\n    });\n};\n\nfunction getAllTextNodes(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false);\n    const nodes = [];\n    let n;\n    while ((n = walker.nextNode())) nodes.push(n);\n    return nodes;\n}\n\nfunction wrapMatchesWithSeparatorAndSegments(textNode, value) {\n    if (!value) return;\n    const text = textNode.nodeValue;\n    const valLen = value.length;\n    if (!valLen) return;\n\n    let idx = text.indexOf(value);\n    if (idx === -1) return; // nincs találat ebben a node-ban\n\n    const frag = document.createDocumentFragment();\n    let start = 0;\n\n    while (idx !== -1) {\n        const before = text.slice(start, idx);\n\n        // 1) value ELŐTTI rész: ha van nem-whitespace tartalom, csomagoljuk <span>-be\n        const beforeTrim = before.trim();\n        if (beforeTrim.length > 0) {\n            const spanBefore = document.createElement('span');\n            spanBefore.textContent = beforeTrim;\n            frag.appendChild(spanBefore);\n        } else {\n            // ha csak whitespace volt, azt hagyjuk figyelmen kívül – a separator elé úgyis beszúrunk 1 szóközt\n        }\n\n        // 2) kötelező space a separator ELÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // 3) a separator maga\n        const sep = document.createElement('span');\n        sep.className = 'separator';\n        sep.textContent = value;\n        frag.appendChild(sep);\n\n        // 4) kötelező space a separator MÖGÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // következő keresési ablak\n        start = idx + valLen;\n        idx = text.indexOf(value, start);\n    }\n\n    // 5) értékeljük a LEGUTOLSÓ találat UTÁNI részt\n    const after = text.slice(start);\n    const afterTrim = after.trim();\n\n    if (afterTrim.length > 0) {\n        // ha van tartalom, az tartalom legyen spanban, a whitespace-ek maradjanak külön text node-ként\n        const leadingWs = after.match(/^\\s*/)?.[0] ?? '';\n        const trailingWs = after.match(/\\s*$/)?.[0] ?? '';\n        if (leadingWs) frag.appendChild(document.createTextNode(leadingWs));\n\n        const spanAfter = document.createElement('span');\n        spanAfter.textContent = afterTrim;\n        frag.appendChild(spanAfter);\n\n        if (trailingWs) frag.appendChild(document.createTextNode(trailingWs));\n    } else {\n        // csak whitespace maradt → tegyük vissza változatlanul\n        if (after) frag.appendChild(document.createTextNode(after));\n    }\n\n    // 6) cseréljük a text node-ot az új tartalomra\n    textNode.parentNode?.replaceChild(frag, textNode);\n}\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","let templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nfunction scriptFromTheTemplate() {\n    // logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    if (Object.keys(data).length === 0) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n\n    scriptFromTheTemplate();\n    templateScripts();\n\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts, zoom};\n","\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n\n                        if (lower.startsWith(\"d'\") || lower.startsWith(\"l'\")) {\n                            const prefix = lower.slice(0, 2); // \"d'\" or \"l'\"\n                            const rest = lower.slice(2);\n                            return prefix + rest.charAt(0).toUpperCase() + rest.slice(1);\n                        }\n\n                        return word.charAt(0).toUpperCase() + word.slice(1);\n                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        // logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","function convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    // const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n    // const match = size.match(/^-?([\\d.]+)([a-z%]*)$/i);\n    const match = size.match(/^(-?[\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    // logInfo(\"IN: \" + size);\n    // logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nexport default convertToPt;","import convertToPt from \"./conversion\";\n\n/**\n * Megméri egy elem „természetes” szélességét: max-width nélkül, egy sorban.\n * A mérés előtt megvárja a webfontok betöltését.\n * Visszatérési érték: px (number). Ha pt kell, szorozd 0.75-tel (96dpi).\n */\nfunction getElementBoxWidth(el, overflown=true) {\n    if (!(el instanceof Element)) throw new Error('measureInlineWidthNowrap: el must be Element');\n\n    // 2) eredeti inline stílusok mentése\n    const prev = {\n        maxWidth: el.style.maxWidth,\n        whiteSpace: el.style.whiteSpace,\n        transform: el.style.transform,\n        display: el.style.display,\n    };\n\n    try {\n        // 3) mérési állapot\n        el.style.maxWidth   = 'none';\n        el.style.whiteSpace = 'nowrap';\n        // el.style.transform  = 'none'; // scale/rotate ne torzítson\n        el.style.display = 'inline-block';\n        // el.style.display = 'inline-block';\n\n        // 4) reflow trigger (biztos ami biztos)\n        // eslint-disable-next-line no-unused-expressions\n        el.offsetWidth;\n\n        // // 5) mérés\n        // const wPx = window.getComputedStyle(el).width;\n        // console.log(`${el.id}: ${wPx}`);\n        // return convertToPt(`${wPx}`);\n        // 5) mérés\n        const wPx = el.getBoundingClientRect().width;\n        let wPx2 = 0;\n        if (overflown) {\n            el.style.display = 'inline';\n            wPx2 = el.getBoundingClientRect().width;\n        }\n        // console.log(`${el.id}: ${wPx}`);\n        return convertToPt(`${Math.max(wPx, wPx2)}px`);\n    } finally {\n        // 6) visszaállítás\n        el.style.maxWidth   = prev.maxWidth;\n        el.style.whiteSpace = prev.whiteSpace;\n        // el.style.transform  = prev.transform;\n        el.style.display = prev.display;\n    }\n}\n\nfunction getTextNodeLineCount(textNode) {\n    if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return 0;\n\n    const range = document.createRange();\n    range.selectNodeContents(textNode);\n\n    // Ez egy NodeList-szerű objektum, minden rect egy sor vagy fragment\n    const rects = range.getClientRects();\n\n    return rects.length;\n}\n\nfunction getAllTextNodes(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false);\n    const out = [];\n    let n;\n    while ((n = walker.nextNode())) {\n        // üres/whitespace-only node-ok nem érdekelnek\n        if (n.nodeValue && n.nodeValue.trim().length) out.push(n);\n    }\n    return out;\n}\n\n/**\n * Sorok számát adja vissza bármilyen DOM node leszármazott textjeire.\n * A rect-eket top szerint csoportosítja (epsilon toleranciával),\n * így elkerüli a túl-számolást inline fragmentek miatt.\n */\nfunction getRenderedLineCountForNode(node, { epsilon = 0.5 } = {}) {\n    if (!node) return 0;\n\n    const rects = [];\n\n    // 1) gyűjtsük ki minden text node sor-fragment rectjeit\n    for (const tn of getAllTextNodes(node)) {\n        const range = document.createRange();\n        range.selectNodeContents(tn);\n        const rlist = range.getClientRects();\n        for (let i = 0; i < rlist.length; i++) {\n            const r = rlist[i];\n            // 0 szélességű/magasságú vagy display:none esetek kiszűrése\n            if (r.width > 0 && r.height > 0) {\n                rects.push({ top: r.top, bottom: r.bottom, left: r.left, right: r.right, height: r.height });\n            }\n        }\n    }\n\n    if (rects.length === 0) return 0;\n\n    // 2) top szerint rendezzük\n    rects.sort((a, b) => a.top - b.top);\n\n    // 3) klaszterezés top alapján (epsilon px tűrés)\n    let lines = 0;\n    let currentTop = rects[0].top;\n\n    for (const r of rects) {\n        if (Math.abs(r.top - currentTop) > epsilon) {\n            lines++;\n            currentTop = r.top;\n        }\n    }\n    // az első klaszter is számít:\n    return lines + 1;\n}\n\nexport {getElementBoxWidth, getTextNodeLineCount, getRenderedLineCountForNode};","import convertToPt from \"../conversion\";\nimport {getElementBoxWidth, getRenderedLineCountForNode, getTextNodeLineCount} from \"../measurement\";\n\nconst elementsToSqueeze = [];\n\nfunction calculateSqueezedFontSize (maxFontSizePt, maxWidthPt, actualWidthPt, actualFontSizePt) {\n\n    const scale = maxWidthPt / actualWidthPt;\n    const newFontSizePt = parseFloat(actualFontSizePt) * scale;\n    // return newFontSizePt;\n    return Math.min(newFontSizePt, maxFontSizePt);\n}\n\nfunction squeeze (s) {\n    // console.log(s);\n\n    const rowCount = getRenderedLineCountForNode(s.element);\n    // const rowCount = getTextNodeLineCount(s.element.childNodes[0]);\n    if (rowCount <= s.maxRows && s.maxRows > 1) {\n        return;\n    }\n\n    if (s.maxRows > 1) {\n        // fitTextToMaxRows(s.element.childNodes[0], s.maxRows, {\n        fitTextToMaxRows(s.element, s.maxRows, {\n            minFontSize: s.minFontSizePt\n        });\n        return;\n    }\n\n    const actualFontSize = convertToPt(window.getComputedStyle(s.element).fontSize);\n    const actualWidthPt = getElementBoxWidth(s.element);\n\n    var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, actualWidthPt, actualFontSize);\n    console.log(`${s.element.id}: ${actualFontSize} - ${newFontSizePt} | ${actualWidthPt} - ${s.maxWidthPt}`);\n    // var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), s.element.style.fontSize);\n    newFontSizePt = Math.max(newFontSizePt, s.minFontSizePt);\n    // newFontSizePt = Math.floor(newFontSizePt * 10) / 10;\n    s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n\n    while (getRenderedLineCountForNode(s.element) > 1) {\n        newFontSizePt -= 0.1;\n        s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n    }\n\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// get elements with squeeze and squeeze-[*] classes\nfunction getElementsToSqueeze () {\n    const squeezeElements = document.querySelectorAll('.squeeze');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction squeezeAll () {\n    // prepareElements();\n    for (var i in elementsToSqueeze) {\n        squeeze(elementsToSqueeze[i]);\n    }\n}\n\nfunction prepareElements () {\n    const elements = getElementsToSqueeze();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        let maxFontSize = window.getComputedStyle(element).fontSize;\n        const currentWidth = window.getComputedStyle(element).width;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        element.style.width = maxWidth;\n        const maxWidthPt = getElementBoxWidth(element, false);\n        element.style.width = currentWidth;\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-font-size-'))?.match(/^max-font-size-\\[([^\\]]+)\\]$/);\n        const maxFontSizePt = maxMatch ? convertToPt(maxMatch[1]) : convertToPt(maxFontSize);\n        const minMatch = classArray.find(c => c.startsWith('min-font-size-'))?.match(/^min-font-size-\\[([^\\]]+)\\]$/);\n        const minFontSizePt = minMatch ? convertToPt(minMatch[1]) : null;\n\n        const maxRowsMatch = classArray.find(c => c.startsWith('max-rows-'))?.match(/^max-rows-\\[([^\\]]+)\\]$/);\n        const maxRows = maxRowsMatch ? maxRowsMatch[1] : 1;\n\n        // const maxWidthPt = convertToPt(maxWidth);\n        // const maxFontSizePt = convertToPt(maxFontSize);\n\n        elementsToSqueeze[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            minFontSizePt: minFontSizePt,\n            maxRows: maxRows,\n        };\n\n        // element.style.fontSize = \"1pt\";\n        element.style.display = \"inline\";\n        // element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        // element.style.maxWidth = \"\";\n        // element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n// ---------\n\nfunction fitTextToMaxRows(element, maxRowCount, {\n    minFontSize = 6,         // px\n    step = 0.05,              // mennyivel csökkentsen egy lépésben\n    maxIter = 500,            // végtelen ciklus elkerülésére\n} = {}) {\n\n    let style = window.getComputedStyle(element);\n    let currentFontSizePt = convertToPt(`${parseFloat(style.fontSize)}px`); // px-ben\n    let iter = 0;\n\n    while (iter < maxIter) {\n        const rowCount = getRenderedLineCountForNode(element);\n        if (rowCount <= maxRowCount) break;\n\n        currentFontSizePt = Math.max(currentFontSizePt - step, minFontSize);\n        element.style.fontSize = `${currentFontSizePt}pt`;\n\n        iter++;\n    }\n\n    console.log(iter);\n\n}\n\n// function fitTextToMaxRows(textNode, maxRowCount, {\n//     minFontSize = 6,         // px\n//     step = 0.5,              // mennyivel csökkentsen egy lépésben\n//     maxIter = 50,            // végtelen ciklus elkerülésére\n// } = {}) {\n//     if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return;\n//\n//     const parent = textNode.parentElement;\n//     if (!parent) return;\n//\n//     let style = window.getComputedStyle(parent);\n//     let currentFontSizePt = convertToPt(`${parseFloat(style.fontSize)}px`); // px-ben\n//     let iter = 0;\n//\n//     while (iter < maxIter) {\n//         const rowCount = getTextNodeLineCount(textNode);\n//         if (rowCount <= maxRowCount) break;\n//\n//         currentFontSizePt = Math.max(currentFontSizePt - step, minFontSize);\n//         parent.style.fontSize = `${currentFontSizePt}pt`;\n//\n//         iter++;\n//     }\n//\n//     console.log(iter);\n//\n// }\n//\nexport { prepareElements, squeezeAll };","import {getElementBoxWidth, getTextNodeLineCount} from \"../measurement\";\nimport convertToPt from \"../conversion\";\n\nconst elementsToSqueezeSpacing = [];\n\nfunction calculateSqueezedLetterSpacing(element, maxWidthPt, {\n    pxToPt = 0.74999943307122,          // 1px = 0.75pt (96dpi-n)\n    epsilonPt = 0.05,       // pontosság (pt)\n    maxIter = 20,           // bináris keresés lépések\n    minLSpt = -5,           // korlátok pt-ben\n    maxLSpt = 20\n} = {}) {\n\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség pt-ben\n    const targetPt = maxWidthPt * 1; // már pt-ben érkezik\n    const text = element.textContent || \"\";\n    const gaps = Math.max(0, text.length - 1);\n    if (gaps === 0) {\n        return parseFloat(getComputedStyle(element).letterSpacing) * pxToPt || 0;\n    }\n\n    // 2) Jelenlegi állapot (px-ben mérünk → pt-re váltunk)\n    let currentLSpx = parseFloat(getComputedStyle(element).letterSpacing);\n    if (Number.isNaN(currentLSpx)) currentLSpx = 0;\n    let currentLSPt = toPt(currentLSpx);\n\n    let currentWidthPt = getElementBoxWidth(element);\n\n    // 3) Első becslés (lineáris modell)\n    let guessPt = currentLSPt;\n    if (gaps > 0) {\n        const extraPerGapPt = (targetPt - currentWidthPt) / gaps;\n        guessPt = currentLSPt + extraPerGapPt;\n    }\n    guessPt = Math.max(minLSpt, Math.min(maxLSpt, guessPt));\n\n    // alkalmazzuk ideiglenesen (px-ben kell beírni a style-ba!)\n    element.style.letterSpacing = toPx(guessPt) + \"px\";\n\n    // mérés\n    let wPt = getElementBoxWidth(element);\n    if (Math.abs(wPt - targetPt) <= epsilonPt) {\n        return guessPt;\n    }\n\n    // 4) Bináris keresés a pontos illesztéshez\n    let loPt, hiPt;\n    if (wPt < targetPt) { loPt = guessPt; hiPt = maxLSpt; }\n    else { loPt = minLSpt; hiPt = guessPt; }\n\n    for (let i = 0; i < maxIter; i++) {\n        const midPt = (loPt + hiPt) / 2;\n        element.style.letterSpacing = toPx(midPt) + \"px\";\n\n        wPt = getElementBoxWidth(element);\n        const diff = wPt - targetPt;\n        if (Math.abs(diff) <= epsilonPt) {\n            guessPt = midPt;\n            break;\n        }\n        if (diff < 0) loPt = midPt; else hiPt = midPt;\n        guessPt = midPt;\n    }\n\n    return guessPt; // PT-ben ad vissza, a te konvencióddal egyezően\n}\n\nfunction squeezeLetterSpacing(s) {\n\n    const rowCount = getTextNodeLineCount(s.element.childNodes[0]);\n    if (rowCount <= s.maxRows && s.maxRows > 1) {\n        return;\n    }\n\n    if (s.maxRows > 1) {\n        fitLetterSpacingToMaxRows(s.element.childNodes[0], s.maxRows, {\n            minSpacing: s.minLetterSpacingPt\n        });\n        return;\n    }\n\n\n    const newLetterSpacingPt = calculateSqueezedLetterSpacing(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const finalLetterSpacingPt = Math.max(Math.min(newLetterSpacingPt, s.maxLetterSpacingPt), s.minLetterSpacingPt);\n\n    s.element.style.letterSpacing = finalLetterSpacingPt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// Adjust letter-spacing for all elements\nfunction squeezeAllLetterSpacing() {\n    for (var i in elementsToSqueezeSpacing) {\n        squeezeLetterSpacing(elementsToSqueezeSpacing[i]);\n    }\n}\n\nfunction getElementsToSqueezeLetterSpacing () {\n    const squeezeElements = document.querySelectorAll('.squeeze-spacing');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\n// Preparation logic remains mostly the same\nfunction prepareElementsForLetterSpacing() {\n    const elements = getElementsToSqueezeLetterSpacing();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n\n        if (!maxWidth || maxWidth === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-letter-spacing-'))?.match(/^max-letter-spacing-\\[([^\\]]+)\\]$/);\n        const maxLetterSpacingPt = maxMatch ? convertToPt(maxMatch[1]) : null;\n        const minMatch = classArray.find(c => c.startsWith('min-letter-spacing-'))?.match(/^min-letter-spacing-\\[([^\\]]+)\\]$/);\n        const minLetterSpacingPt = minMatch ? convertToPt(minMatch[1]) : null;\n\n        const maxRowsMatch = classArray.find(c => c.startsWith('max-rows-'))?.match(/^max-rows-\\[([^\\]]+)\\]$/);\n        const maxRows = maxRowsMatch ? maxRowsMatch[1] : 1;\n\n        elementsToSqueezeSpacing[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxLetterSpacingPt: maxLetterSpacingPt,\n            minLetterSpacingPt: minLetterSpacingPt,\n            maxRows: maxRows,\n        };\n\n        // element.style.letterSpacing = \"0.1px\";\n        // element.style.maxWidth = \"\";\n        // element.style.width = \"fit-content\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        // element.style.whiteSpace = \"nowrap\"; // Prevent wrapping\n    });\n}\n\nfunction fitLetterSpacingToMaxRows(textNode, maxRows, {\n    minSpacing = -5,   // px – alsó korlát\n    step = 0.2,        // px – ennyivel csökkentünk iterációnként\n    maxIter = 0,      // véd a végtelen ciklus ellen\n} = {}) {\n    if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return;\n\n    const parent = textNode.parentElement;\n    if (!parent) return;\n\n    const style = window.getComputedStyle(parent);\n    let currentSpacingPt = convertToPt(`${parseFloat(style.letterSpacing) || 0}px`);\n    let iter = 0;\n\n    while (iter < maxIter) {\n        const rowCount = getTextNodeLineCount(textNode);\n        if (rowCount <= maxRows) break; // elértük vagy alatta vagyunk → kész\n\n        currentSpacingPt = Math.max(currentSpacingPt - step, minSpacing);\n        parent.style.letterSpacing = `${currentSpacingPt}pt`;\n\n        iter++;\n    }\n\n    return currentSpacingPt; // visszaadja a végső értéket\n}\n\nexport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing };\n\n\n","import convertToPt from \"../conversion\";\nimport {getElementBoxWidth, getRenderedLineCountForNode} from \"../measurement\";\n\nconst elementsToSqueezeScaling = [];\n\nfunction getElementsToScaling () {\n    const squeezeElements = document.querySelectorAll('.squeeze-scaling');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction prepareElementsForScaling() {\n    const elements = getElementsToScaling();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n        const currentWidth = window.getComputedStyle(element).width;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        // element.innerHTML = \"\";\n        element.style.width = maxWidth;\n        const maxWidthPt = getElementBoxWidth(element, false);\n        element.style.width = currentWidth;\n\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-scale-'))?.match(/^max-scale-\\[([^\\]]+)\\]$/);\n        const maxScale = maxMatch ? maxMatch[1] : null;\n        const minMatch = classArray.find(c => c.startsWith('min-scale-'))?.match(/^min-scale-\\[([^\\]]+)\\]$/);\n        const minScale = minMatch ? minMatch[1] : null;\n\n        elementsToSqueezeScaling[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            maxScale: maxScale,\n            minScale: minScale,\n        };\n\n        element.style.transform = \"scale(1, 1)\";\n        element.style.transformOrigin = \"left center\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.maxWidth = \"\";\n        // element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n/**\n * A szöveg szélességét scale-lel illeszti a kívánt maxWidthPt-re.\n * - csak X irányban skáláz (alapértelmezés), Y-t 1-en hagyja\n * - pt-ben (printer world) számol, a style-ba px alapú scale kerül\n * - megtartja az eredeti transformot (előre teszi a scale-t)\n *\n * @param {HTMLElement} element   - a skálázandó elem\n * @param {number}      maxWidthPt- cél szélesség pt-ben\n * @param {object}      opts\n *    pxToPt=0.75       - 1px = 0.75pt (96 dpi)\n *    axis='x'          - 'x' | 'uniform'  ('uniform' esetén X=Y skála)\n *    minScale=0.2      - skála alsó korlát\n *    maxScale=5        - skála felső korlát\n *    epsilon=0.05      - engedett hiba (pt)\n *    maxIter=5         - legfeljebb ennyiszer finomít\n *    setOrigin=true    - bal szélre állítja a transform-origin-t\n *\n * @returns {number}    - a végső X scale érték\n */\nfunction calculateSqueezedScale(\n    element,\n    maxWidthPt,\n    {\n        pxToPt = 0.74999943307122,\n        axis = 'x',         // 'x' vagy 'uniform'\n        minScale = 0.2,\n        maxScale = 1,\n        epsilon = 0.05,\n        maxIter = 0,\n        setOrigin = true,\n    } = {}\n) {\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség px-ben\n    const targetPt = maxWidthPt;\n    // const targetPx = toPx(maxWidthPt);\n\n    // 2) Eredeti transform elmentése, méréshez ideiglenesen kikapcsoljuk a skálát\n    const prevTransform = element.style.transform || '';\n    const prevOrigin = element.style.transformOrigin || '';\n\n    // a legegyszerűbb és legstabilabb: ideiglenesen 'none', hogy a nyers szélességet mérjük\n    element.style.transform = 'none';\n    if (setOrigin) element.style.transformOrigin = 'left center';\n\n    // 3) Nyers (skála nélküli) szélesség\n    const baseWidthPt = getElementBoxWidth(element) || 0;\n    // const baseWidthPx = element.getBoundingClientRect().width || 0;\n    if (baseWidthPt <= 0) {\n        // nincs értelmezhető szélesség – ne robbanjon\n        element.style.transform = prevTransform;\n        element.style.transformOrigin = prevOrigin;\n        return 1;\n    }\n\n    // 4) Első becslés: arányos skála\n    let sx = clamp(targetPt / baseWidthPt, minScale, maxScale);\n    console.log(`sx1: ${sx}`);\n    let sy = (axis === 'uniform') ? sx : 1;\n\n    // alkalmazzuk: a scale-t előre tesszük, a meglévő transform megmarad\n    element.style.transform = `scale(${sx}, ${sy})`.trim();\n    // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n\n    // 5) Finomhangolás (iteratív, gyors konvergencia)\n    for (let i = 0; i < maxIter; i++) {\n        const w = getElementBoxWidth(element);\n        // const w = element.getBoundingClientRect().width;\n        const diffPt = targetPt - w;\n        if (Math.abs(diffPt) <= epsilon) break;\n\n        // multiplikatív korrekció: új sx = régi sx * (cél / mért)\n        const factor = targetPt / (w || 1);\n        sx = clamp(sx * factor, minScale, maxScale);\n        console.log(`w: ${w} - sx2: ${sx}`);\n        sy = (axis === 'uniform') ? sx : 1;\n        element.style.transform = `scale(${sx}, ${sy})`.trim();\n        // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n    }\n\n    // (opcionális) ha nem akarsz origin-t hagyni:\n    if (!setOrigin) element.style.transformOrigin = prevOrigin;\n\n    console.log(`sx3: ${sx}`);\n    return sx;\n\n    function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }\n}\n\n\n\nfunction squeezeScale(s) {\n\n\n    const rowCount = getRenderedLineCountForNode(s.element);\n    if (rowCount <= s.maxRows && s.maxRows > 1) {\n        console.log(`rowCount: ${rowCount}`);\n        return;\n    }\n\n    const newScale = calculateSqueezedScale(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n    );\n\n    const maxScale = s.maxScale ?? newScale;\n    const minScale = s.minScale ?? newScale;\n    const finalScale = Math.max(Math.min(newScale, Number(maxScale)), Number(minScale));\n    const finalScaleString = `scale(${finalScale}, 1)`;\n\n    s.element.style.transform = finalScaleString;\n    s.element.style.maxWidth = `${s.maxWidthPt / finalScale}pt`;\n    s.element.style.width = `${s.maxWidthPt / finalScale}pt`;\n}\n\n\nfunction squeezeAllScaling() {\n    for (var i in elementsToSqueezeScaling) {\n        squeezeScale(elementsToSqueezeScaling[i]);\n    }\n}\n\nexport { prepareElementsForScaling, squeezeAllScaling };\n","import handleSeparators from \"./separator\";\nimport { prepareElements, squeezeAll } from \"./squeeze/squeeze-font-size\";\nimport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing } from \"./squeeze/squeeze-letter-spacing\";\nimport { prepareElementsForScaling, squeezeAllScaling } from \"./squeeze/squeeze-scaling\";\n\nfunction runSqueeze() {\n    console.log(\"SQUEEZING\");\n\n    prepareElements();\n    prepareElementsForLetterSpacing();\n    prepareElementsForScaling();\n\n    squeezeAll();\n    squeezeAllLetterSpacing();\n    squeezeAllScaling();\n\n    handleSeparators();\n}\n\nexport default runSqueeze;","import {renderTemplate, zoom} from \"./render-template\";\nfunction addPostMessageHandler() {\n    window.addEventListener('message', (event) => {\n        // console.log('Message received from parent:', event.data);\n\n        const sourceNode = document.getElementById('entry-template');\n\n        if (!event.data.data || !sourceNode) {\n            return;\n        }\n\n        const data = {};\n        Object.keys(event.data.data).map((key) => {\n            if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n                data[key] = event.data.data[key][0].label;\n            } else {\n                data[key] = event.data.data[key];\n            }\n        });\n\n        if (event.data.msgId === \"dataChanged\") {\n            renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n            zoom(event.data.zoom / 100);\n        }\n\n        if (event.data.msgId === \"getRenderedMarkup\") {\n            renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n            zoom(event.data.zoom / 100);\n        }\n\n        if (event.data.msgId === \"zoom\") {\n            zoom(event.data.data / 100);\n        }\n\n    });\n}\n\nexport {addPostMessageHandler};","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\nimport {addPostMessageHandler} from \"./post-msg-handler\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts(data) {\n\n    async function init(data) {\n\n        setTemplateScripts(templateScripts);\n\n        addPostMessageHandler();\n\n        if (document.fonts?.ready) {\n            try { await document.fonts.ready; } catch {}\n        }\n\n        // const rendered = false;\n        const rendered = renderTemplate(data);\n        // const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    document.addEventListener(\"DOMContentLoaded\", async (event) => {\n        await init(data);\n    });\n\n    window.__PROCESSING_DONE__ = true;\n}\n\nexport default addPodScripts;"],"names":["handleSeparators","results","Array","from","document","querySelectorAll","map","el","m","className","match","element","value","filter","Boolean","forEach","_ref","textNodes","getAllTextNodes","node","wrapMatchesWithSeparatorAndSegments","separatorNodeList","separators","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","prevInNewLine","getYCoordinate","style","visibility","display","root","walker","createTreeWalker","NodeFilter","SHOW_TEXT","nodes","n","nextNode","push","textNode","_textNode$parentNode","text","nodeValue","valLen","length","idx","indexOf","frag","createDocumentFragment","start","before","slice","beforeTrim","trim","spanBefore","createElement","textContent","appendChild","createTextNode","sep","after","afterTrim","_after$match$","_after$match","_after$match$2","_after$match2","leadingWs","trailingWs","spanAfter","parentNode","replaceChild","getBoundingClientRect","top","templateScripts","setTemplateScripts","scripts","renderTemplate","data","templateId","orderLineUuid","options","sendData","sourceNode","getElementById","Object","keys","source","innerHTML","safeData","JSON","parse","stringify","key","replace","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","window","parent","postMessage","zoom","ratio","scale","smartCaps","ignore","getTextNodesInSmartCap","arguments","undefined","result","elements","word","lower","toLowerCase","includes","startsWith","prefix","rest","charAt","toUpperCase","smartCapsNodeList","smartCap","convertToPt","size","dpi","pointsPerInch","conversionFactors","pt","px","mm","cm","in","pc","em","rem","Error","parseFloat","unit","getElementBoxWidth","overflown","Element","maxWidth","whiteSpace","transform","offsetWidth","wPx","width","wPx2","concat","Math","max","getTextNodeLineCount","nodeType","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","out","getRenderedLineCountForNode","_ref$epsilon","epsilon","_iterator","_createForOfIteratorHelper","_step","s","done","tn","rlist","i","r","height","bottom","left","right","err","e","f","sort","a","b","lines","currentTop","_i","_rects","abs","elementsToSqueeze","calculateSqueezedFontSize","maxFontSizePt","maxWidthPt","actualWidthPt","actualFontSizePt","newFontSizePt","min","squeeze","rowCount","maxRows","fitTextToMaxRows","minFontSize","minFontSizePt","actualFontSize","getComputedStyle","fontSize","console","log","id","toString","getElementsToSqueeze","squeezeElements","squeezeElementsWithParams","squeezeAll","prepareElements","index","_classArray$find","_classArray$find2","_classArray$find3","maxFontSize","currentWidth","classArray","classList","maxMatch","find","c","minMatch","maxRowsMatch","flex","alignSelf","maxRowCount","_ref$minFontSize","_ref$step","step","_ref$maxIter","maxIter","currentFontSizePt","iter","elementsToSqueezeSpacing","calculateSqueezedLetterSpacing","_ref$pxToPt","pxToPt","_ref$epsilonPt","epsilonPt","_ref$minLSpt","minLSpt","_ref$maxLSpt","maxLSpt","toPt","toPx","targetPt","gaps","letterSpacing","currentLSpx","Number","isNaN","currentLSPt","currentWidthPt","guessPt","extraPerGapPt","wPt","loPt","hiPt","midPt","diff","squeezeLetterSpacing","childNodes","fitLetterSpacingToMaxRows","minSpacing","minLetterSpacingPt","newLetterSpacingPt","finalLetterSpacingPt","maxLetterSpacingPt","squeezeAllLetterSpacing","getElementsToSqueezeLetterSpacing","prepareElementsForLetterSpacing","_ref2","_ref2$minSpacing","_ref2$step","_ref2$maxIter","parentElement","currentSpacingPt","elementsToSqueezeScaling","getElementsToScaling","prepareElementsForScaling","maxScale","minScale","transformOrigin","calculateSqueezedScale","_ref$axis","axis","_ref$minScale","_ref$maxScale","_ref$setOrigin","setOrigin","prevTransform","prevOrigin","baseWidthPt","sx","clamp","sy","w","diffPt","factor","v","lo","hi","squeezeScale","_s$maxScale","_s$minScale","newScale","finalScale","finalScaleString","squeezeAllScaling","runSqueeze","addPostMessageHandler","addEventListener","event","isArray","label","msgId","addPodScripts","init","_x","_init","apply","_asyncToGenerator","_regenerator","_callee2","_document$fonts","rendered","_context2","p","fonts","ready","_callee","_context","_x2","__PROCESSING_DONE__"],"mappings":"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"}