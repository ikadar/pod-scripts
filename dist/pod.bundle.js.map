{"version":3,"file":"pod.bundle.js","sources":["../src/log-info.js","../src/separator.js","../src/render-template.js","../src/smart-caps.js","../src/conversion.js","../src/measurement.js","../src/squeeze/squeeze-font-size.js","../src/squeeze/squeeze-letter-spacing.js","../src/squeeze/squeeze-scaling.js","../src/squeeze.js","../src/pod-template-scripts.js"],"sourcesContent":["const indentIncrement = 4;\nvar indent = 0;\nconst debug = true;\n\nfunction logInfo (info) {\n    if (debug) {\n        console.log(\"|\" + getIndentation() + info);\n    }\n}\n\nfunction getIndentation () {\n    var indentation = \"\";\n    for (var i=0; i<indent; i++) {\n        indentation = indentation + \" \";\n    }\n\n    return indentation;\n}\n\nfunction increaseIndentation () {\n    indent += indentIncrement;\n}\n\nfunction decreaseIndentation () {\n    indent -= indentIncrement;\n}\n\nexport default logInfo;\nexport { increaseIndentation, decreaseIndentation };","import logInfo from \"./log-info\";\n\nconst handleSeparators = () => {\n\n    logInfo(\"HANDLING SEPARATORS\");\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                nextInNewLine = true;\n            }\n        }\n\n        if (prev) {\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                prevInNewLine = true;\n            }\n        }\n\n        if (nextInNewLine) {\n            console.log(\"VISIBILIITY HIDDEN\");\n            separator.style.visibility = \"hidden\";\n        } else {\n            console.log(\"VISIBILIITY VISIBLE\");\n            separator.style.visibility = \"visible\";\n        }\n\n        // if (prevInNewLine) {\n        //     console.log(\"DISPLAY NONE\");\n        //     separator.style.display = \"none\";\n        // } else {\n        //     console.log(\"DISPLAY INLINE-BLOCK\");\n        //     separator.style.display = \"inline\";\n        // }\n\n    });\n};\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","import logInfo from \"./log-info\";\n\nlet templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nwindow.addEventListener('message', (event) => {\n    // console.log('Message received from parent:', event.data);\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!event.data.data || !sourceNode) {\n        return;\n    }\n\n    const data = {};\n    Object.keys(event.data.data).map((key) => {\n        if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n            data[key] = event.data.data[key][0].label;\n        } else {\n            data[key] = event.data.data[key];\n        }\n    });\n\n    if (event.data.msgId === \"dataChanged\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"getRenderedMarkup\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"zoom\") {\n        zoom(event.data.data / 100);\n    }\n\n});\n\nfunction scriptFromTheTemplate() {\n    // logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n    scriptFromTheTemplate();\n    templateScripts();\n    // smartCaps();\n    // runSqueeze();\n    // handleSeparators();\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts};\n","\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n\n                        if (lower.startsWith(\"d'\") || lower.startsWith(\"l'\")) {\n                            const prefix = lower.slice(0, 2); // \"d'\" or \"l'\"\n                            const rest = lower.slice(2);\n                            return prefix + rest.charAt(0).toUpperCase() + rest.slice(1);\n                        }\n\n                        return word.charAt(0).toUpperCase() + word.slice(1);\n                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        // logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","function convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    // logInfo(\"IN: \" + size);\n    // logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nexport default convertToPt;","import convertToPt from \"./conversion\";\n\nfunction getElementBoxWidth (el) {\n    return convertToPt(el.getBoundingClientRect().width + \"px\");\n}\n\nexport {getElementBoxWidth};","import convertToPt from \"../conversion\";\nimport {getElementBoxWidth} from \"../measurement\";\n\nconst elementsToSqueeze = [];\n\nfunction calculateSqueezedFontSize (maxFontSizePt, maxWidthPt, actualWidthPt, actualFontSizePt) {\n\n    const scale = maxWidthPt / actualWidthPt;\n    const newFontSizePt = scale;\n    // return newFontSizePt;\n    return Math.min(newFontSizePt, maxFontSizePt);\n}\n\nfunction squeeze (s) {\n    // console.log(s);\n    var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), s.element.style.fontSize);\n    newFontSizePt = Math.max(newFontSizePt, s.minFontSizePt);\n    s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// get elements with squeeze and squeeze-[*] classes\nfunction getElementsToSqueeze () {\n    const squeezeElements = document.querySelectorAll('.squeeze');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction squeezeAll () {\n    // prepareElements();\n    for (var i in elementsToSqueeze) {\n        squeeze(elementsToSqueeze[i]);\n    }\n}\n\nfunction prepareElements () {\n    const elements = getElementsToSqueeze();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        let maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-font-size-'))?.match(/^max-font-size-\\[([^\\]]+)\\]$/);\n        const maxFontSizePt = maxMatch ? convertToPt(maxMatch[1]) : convertToPt(maxFontSize);\n        const minMatch = classArray.find(c => c.startsWith('min-font-size-'))?.match(/^min-font-size-\\[([^\\]]+)\\]$/);\n        const minFontSizePt = minMatch ? convertToPt(minMatch[1]) : null;\n\n\n        const maxWidthPt = convertToPt(maxWidth);\n        // const maxFontSizePt = convertToPt(maxFontSize);\n\n        elementsToSqueeze[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            minFontSizePt: minFontSizePt,\n        };\n\n        element.style.fontSize = \"1pt\";\n        // element.style.width = \"fit-content\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\nexport { prepareElements, squeezeAll };","import {getElementBoxWidth} from \"../measurement\";\nimport convertToPt from \"../conversion\";\n\nconst elementsToSqueezeSpacing = [];\n\nfunction calculateSqueezedLetterSpacing(element, maxWidthPt, {\n    pxToPt = 0.74999943307122,          // 1px = 0.75pt (96dpi-n)\n    epsilonPt = 0.05,       // pontosság (pt)\n    maxIter = 20,           // bináris keresés lépések\n    minLSpt = -5,           // korlátok pt-ben\n    maxLSpt = 20\n} = {}) {\n\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség pt-ben\n    const targetPt = maxWidthPt * 1; // már pt-ben érkezik\n    const text = element.textContent || \"\";\n    const gaps = Math.max(0, text.length - 1);\n    if (gaps === 0) {\n        return parseFloat(getComputedStyle(element).letterSpacing) * pxToPt || 0;\n    }\n\n    // 2) Jelenlegi állapot (px-ben mérünk → pt-re váltunk)\n    let currentLSpx = parseFloat(getComputedStyle(element).letterSpacing);\n    if (Number.isNaN(currentLSpx)) currentLSpx = 0;\n    let currentLSPt = toPt(currentLSpx);\n\n    let currentWidthPt = getElementBoxWidth(element);\n\n    // 3) Első becslés (lineáris modell)\n    let guessPt = currentLSPt;\n    if (gaps > 0) {\n        const extraPerGapPt = (targetPt - currentWidthPt) / gaps;\n        guessPt = currentLSPt + extraPerGapPt;\n    }\n    guessPt = Math.max(minLSpt, Math.min(maxLSpt, guessPt));\n\n    // alkalmazzuk ideiglenesen (px-ben kell beírni a style-ba!)\n    element.style.letterSpacing = toPx(guessPt) + \"px\";\n\n    // mérés\n    let wPt = getElementBoxWidth(element);\n    if (Math.abs(wPt - targetPt) <= epsilonPt) {\n        return guessPt;\n    }\n\n    // 4) Bináris keresés a pontos illesztéshez\n    let loPt, hiPt;\n    if (wPt < targetPt) { loPt = guessPt; hiPt = maxLSpt; }\n    else { loPt = minLSpt; hiPt = guessPt; }\n\n    for (let i = 0; i < maxIter; i++) {\n        const midPt = (loPt + hiPt) / 2;\n        element.style.letterSpacing = toPx(midPt) + \"px\";\n\n        wPt = getElementBoxWidth(element);\n        const diff = wPt - targetPt;\n        if (Math.abs(diff) <= epsilonPt) {\n            guessPt = midPt;\n            break;\n        }\n        if (diff < 0) loPt = midPt; else hiPt = midPt;\n        guessPt = midPt;\n    }\n\n    return guessPt; // PT-ben ad vissza, a te konvencióddal egyezően\n}\n\nfunction squeezeLetterSpacing(s) {\n\n    const newLetterSpacingPt = calculateSqueezedLetterSpacing(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const finalLetterSpacingPt = Math.max(Math.min(newLetterSpacingPt, s.maxLetterSpacingPt), s.minLetterSpacingPt);\n\n    s.element.style.letterSpacing = finalLetterSpacingPt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// Adjust letter-spacing for all elements\nfunction squeezeAllLetterSpacing() {\n    for (var i in elementsToSqueezeSpacing) {\n        squeezeLetterSpacing(elementsToSqueezeSpacing[i]);\n    }\n}\n\nfunction getElementsToSqueezeLetterSpacing () {\n    const squeezeElements = document.querySelectorAll('.squeeze-spacing');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\n// Preparation logic remains mostly the same\nfunction prepareElementsForLetterSpacing() {\n    console.log(\"----------------------- prepareElementsForLetterSpacing\");\n    const elements = getElementsToSqueezeLetterSpacing();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n\n        if (!maxWidth || maxWidth === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-letter-spacing-'))?.match(/^max-letter-spacing-\\[([^\\]]+)\\]$/);\n        const maxLetterSpacingPt = maxMatch ? convertToPt(maxMatch[1]) : null;\n        const minMatch = classArray.find(c => c.startsWith('min-letter-spacing-'))?.match(/^min-letter-spacing-\\[([^\\]]+)\\]$/);\n        const minLetterSpacingPt = minMatch ? convertToPt(minMatch[1]) : null;\n\n        elementsToSqueezeSpacing[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxLetterSpacingPt: maxLetterSpacingPt,\n            minLetterSpacingPt: minLetterSpacingPt,\n        };\n\n        element.style.letterSpacing = \"0.1px\";\n        element.style.maxWidth = \"\";\n        // element.style.width = \"fit-content\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.whiteSpace = \"nowrap\"; // Prevent wrapping\n    });\n}\n\nexport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing };\n\n\n","import convertToPt from \"../conversion\";\n\nconst elementsToSqueezeScaling = [];\n\nfunction getElementsToScaling () {\n    const squeezeElements = document.querySelectorAll('.squeeze-scaling');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction prepareElementsForScaling() {\n    const elements = getElementsToScaling();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-scale-'))?.match(/^max-scale-\\[([^\\]]+)\\]$/);\n        const maxScale = maxMatch ? maxMatch[1] : null;\n        const minMatch = classArray.find(c => c.startsWith('min-scale-'))?.match(/^min-scale-\\[([^\\]]+)\\]$/);\n        const minScale = minMatch ? minMatch[1] : null;\n\n        elementsToSqueezeScaling[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            maxScale: maxScale,\n            minScale: minScale,\n        };\n\n        element.style.transform = \"scale(1, 1)\";\n        element.style.transformOrigin = \"left center\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n/**\n * A szöveg szélességét scale-lel illeszti a kívánt maxWidthPt-re.\n * - csak X irányban skáláz (alapértelmezés), Y-t 1-en hagyja\n * - pt-ben (printer world) számol, a style-ba px alapú scale kerül\n * - megtartja az eredeti transformot (előre teszi a scale-t)\n *\n * @param {HTMLElement} element   - a skálázandó elem\n * @param {number}      maxWidthPt- cél szélesség pt-ben\n * @param {object}      opts\n *    pxToPt=0.75       - 1px = 0.75pt (96 dpi)\n *    axis='x'          - 'x' | 'uniform'  ('uniform' esetén X=Y skála)\n *    minScale=0.2      - skála alsó korlát\n *    maxScale=5        - skála felső korlát\n *    epsilon=0.05      - engedett hiba (pt)\n *    maxIter=5         - legfeljebb ennyiszer finomít\n *    setOrigin=true    - bal szélre állítja a transform-origin-t\n *\n * @returns {number}    - a végső X scale érték\n */\nfunction calculateSqueezedScale(\n    element,\n    maxWidthPt,\n    {\n        pxToPt = 0.74999943307122,\n        axis = 'x',         // 'x' vagy 'uniform'\n        minScale = 0.2,\n        maxScale = 5,\n        epsilon = 0.05,\n        maxIter = 5,\n        setOrigin = true,\n    } = {}\n) {\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség px-ben\n    const targetPx = toPx(maxWidthPt);\n\n    // 2) Eredeti transform elmentése, méréshez ideiglenesen kikapcsoljuk a skálát\n    const prevTransform = element.style.transform || '';\n    const prevOrigin = element.style.transformOrigin || '';\n\n    // a legegyszerűbb és legstabilabb: ideiglenesen 'none', hogy a nyers szélességet mérjük\n    element.style.transform = 'none';\n    if (setOrigin) element.style.transformOrigin = 'left center';\n\n    // 3) Nyers (skála nélküli) szélesség\n    const baseWidthPx = element.getBoundingClientRect().width || 0;\n    if (baseWidthPx <= 0) {\n        // nincs értelmezhető szélesség – ne robbanjon\n        element.style.transform = prevTransform;\n        element.style.transformOrigin = prevOrigin;\n        return 1;\n    }\n\n    // 4) Első becslés: arányos skála\n    let sx = clamp(targetPx / baseWidthPx, minScale, maxScale);\n    let sy = (axis === 'uniform') ? sx : 1;\n\n    // alkalmazzuk: a scale-t előre tesszük, a meglévő transform megmarad\n    element.style.transform = `scale(${sx}, ${sy})`.trim();\n    // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n\n    // 5) Finomhangolás (iteratív, gyors konvergencia)\n    for (let i = 0; i < maxIter; i++) {\n        const w = element.getBoundingClientRect().width;\n        const diffPx = targetPx - w;\n        if (Math.abs(toPt(diffPx)) <= epsilon) break;\n\n        // multiplikatív korrekció: új sx = régi sx * (cél / mért)\n        const factor = targetPx / (w || 1);\n        sx = clamp(sx * factor, minScale, maxScale);\n        sy = (axis === 'uniform') ? sx : 1;\n        element.style.transform = `scale(${sx}, ${sy})`.trim();\n        // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n    }\n\n    // (opcionális) ha nem akarsz origin-t hagyni:\n    if (!setOrigin) element.style.transformOrigin = prevOrigin;\n\n    return sx;\n\n    function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }\n}\n\n\n\nfunction squeezeScale(s) {\n\n    const originalLetterSpacing = parseFloat(window.getComputedStyle(s.element).letterSpacing) || 0;\n\n    const newScale = calculateSqueezedScale(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const maxScale = s.maxScale ?? newScale;\n    const minScale = s.minScale ?? newScale;\n    const finalScale = Math.max(Math.min(newScale, Number(maxScale)), Number(minScale));\n    const finalScaleString = `scale(${finalScale}, 1)`;\n\n    s.element.style.transform = finalScaleString;\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n\nfunction squeezeAllScaling() {\n    for (var i in elementsToSqueezeScaling) {\n        squeezeScale(elementsToSqueezeScaling[i]);\n    }\n}\n\nexport { prepareElementsForScaling, squeezeAllScaling };\n","import handleSeparators from \"./separator\";\nimport { prepareElements, squeezeAll } from \"./squeeze/squeeze-font-size\";\nimport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing } from \"./squeeze/squeeze-letter-spacing\";\nimport { prepareElementsForScaling, squeezeAllScaling } from \"./squeeze/squeeze-scaling\";\n\nfunction runSqueeze() {\n    prepareElements();\n    prepareElementsForLetterSpacing();\n    prepareElementsForScaling();\n\n    squeezeAll();\n    squeezeAllLetterSpacing();\n    squeezeAllScaling();\n\n    // handleSeparators();\n}\n\nexport default runSqueeze;","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts() {\n\n    function init() {\n\n        setTemplateScripts(templateScripts);\n        const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    init();\n\n    window.__PROCESSING_DONE__ = true;\n}\n\nexport default addPodScripts;"],"names":["indent","logInfo","info","console","log","getIndentation","indentation","i","handleSeparators","separatorNodeList","document","querySelectorAll","separators","Array","from","map","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","getYCoordinate","style","visibility","element","getBoundingClientRect","top","templateScripts","setTemplateScripts","scripts","window","addEventListener","event","sourceNode","getElementById","data","Object","keys","key","isArray","length","label","msgId","renderTemplate","templateId","orderLineUuid","options","zoom","sendData","source","innerHTML","safeData","JSON","parse","stringify","value","replace","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","parent","postMessage","ratio","scale","smartCaps","ignore","getTextNodesInSmartCap","root","arguments","undefined","result","elements","forEach","el","walker","createTreeWalker","NodeFilter","SHOW_TEXT","node","nextNode","text","nodeValue","trim","word","lower","toLowerCase","includes","startsWith","prefix","slice","rest","charAt","toUpperCase","push","smartCapsNodeList","smartCap","convertToPt","size","dpi","pointsPerInch","conversionFactors","pt","px","mm","cm","in","pc","em","rem","match","Error","parseFloat","unit","getElementBoxWidth","width","elementsToSqueeze","calculateSqueezedFontSize","maxFontSizePt","maxWidthPt","actualWidthPt","actualFontSizePt","newFontSizePt","Math","min","squeeze","s","fontSize","max","minFontSizePt","toString","maxWidth","getElementsToSqueeze","squeezeElements","squeezeElementsWithParams","squeezeAll","prepareElements","index","_classArray$find","_classArray$find2","getComputedStyle","maxFontSize","classArray","classList","maxMatch","find","c","minMatch","display","flex","alignSelf","whiteSpace","elementsToSqueezeSpacing","calculateSqueezedLetterSpacing","_ref","_ref$pxToPt","pxToPt","_ref$epsilonPt","epsilonPt","_ref$maxIter","maxIter","_ref$minLSpt","minLSpt","_ref$maxLSpt","maxLSpt","toPt","toPx","targetPt","textContent","gaps","letterSpacing","currentLSpx","Number","isNaN","currentLSPt","currentWidthPt","guessPt","extraPerGapPt","wPt","abs","loPt","hiPt","midPt","diff","squeezeLetterSpacing","newLetterSpacingPt","finalLetterSpacingPt","maxLetterSpacingPt","minLetterSpacingPt","squeezeAllLetterSpacing","getElementsToSqueezeLetterSpacing","prepareElementsForLetterSpacing","elementsToSqueezeScaling","getElementsToScaling","prepareElementsForScaling","maxScale","minScale","transform","transformOrigin","calculateSqueezedScale","_ref$axis","axis","_ref$minScale","_ref$maxScale","_ref$epsilon","epsilon","_ref$setOrigin","setOrigin","targetPx","prevTransform","prevOrigin","baseWidthPx","sx","clamp","sy","concat","w","diffPx","factor","v","lo","hi","squeezeScale","_s$maxScale","_s$minScale","newScale","finalScale","finalScaleString","squeezeAllScaling","runSqueeze","addPodScripts","init","rendered","__PROCESSING_DONE__"],"mappings":"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"}