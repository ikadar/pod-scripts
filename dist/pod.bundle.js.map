{"version":3,"file":"pod.bundle.js","sources":["../src/logInfo.js","../src/separator.js","../src/smart-caps.js","../src/squeeze.js","../src/render-template.js","../src/pod-template-scripts.js"],"sourcesContent":["\nfunction logInfo (info) {\n    console.log(info);\n}\n\nexport default logInfo;","import logInfo from \"./logInfo\";\n\nconst handleSeparators = () => {\n\n    logInfo(\"HANDLING SEPARATORS\");\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                nextInNewLine = true;\n            }\n        }\n\n        if (prev) {\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                prevInNewLine = true;\n            }\n        }\n\n        if (nextInNewLine || prevInNewLine) {\n            separator.style.visibility = \"hidden\";\n        } else {\n            separator.style.visibility = \"visible\";\n        }\n\n    });\n};\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","import logInfo from \"./logInfo\";\n\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    // d' l'\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n\n                        if (lower.startsWith(\"d'\") || lower.startsWith(\"l'\")) {\n                            const prefix = lower.slice(0, 2); // \"d'\" or \"l'\"\n                            const rest = lower.slice(2);\n                            return prefix + rest.charAt(0).toUpperCase() + rest.slice(1);\n                        }\n\n                        return word.charAt(0).toUpperCase() + word.slice(1);\n                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        // logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","import handleSeparators from \"./separator\";\n\nconst indentIncrement = 4;\nvar indent = 0;\nconst debug = true;\n\nfunction logInfo (info) {\n    if (debug) {\n        console.log(\"|\" + getIndentation() + info);\n    }\n}\n\nfunction getIndentation () {\n    var indentation = \"\";\n    for (var i=0; i<indent; i++) {\n        indentation = indentation + \" \";\n    }\n\n    return indentation;\n}\n\nfunction increaseIndentation () {\n    indent += indentIncrement;\n}\n\nfunction decreaseIndentation () {\n    indent -= indentIncrement;\n}\n\nfunction calculateSqueezedFontSize (maxFontSizePt, maxWidthPt, actualWidthPt, actualFontSizePt) {\n\n    logInfo(\"--- FONT SIZE CALCULATION STARTED\");\n    logInfo(\"\");\n    increaseIndentation();\n\n    const scale = maxWidthPt / actualWidthPt;\n    const newFontSizePt = scale;\n\n    logInfo(\"maxFontSizePt: \" + maxFontSizePt);\n    logInfo(\"actualFontSizePt: \" + actualFontSizePt);\n    logInfo(\"maxWidthPt: \" + maxWidthPt);\n    logInfo(\"actualWidthPt: \" + actualWidthPt);\n    logInfo(\"scale: \" + scale);\n    logInfo(\"NEW fontSize: \" + newFontSizePt);\n    logInfo(\"NEW fontSize: \" + Math.min(newFontSizePt, maxFontSizePt));\n\n    decreaseIndentation();\n\n    logInfo(\"\");\n    logInfo(\"--- FONT SIZE CALCULATION ENDED\");\n\n    // return newFontSizePt;\n    return Math.min(newFontSizePt, maxFontSizePt);\n}\n\nfunction getElementBoxWidth (el) {\n    return convertToPt(el.getBoundingClientRect().width + \"px\");\n}\n\nfunction squeeze (s) {\n    // console.log(s);\n    logInfo(\"=== \" + s.element.id + \" ===\");\n    var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), s.element.style.fontSize);\n    s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// get elements with squeeze and squeeze-[*] classes\nfunction getElementsToSqueeze () {\n    const squeezeElements = document.querySelectorAll('.squeeze');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction squeezeAll () {\n    // prepareElements();\n    for (var i in elementsToSqueeze) {\n        squeeze(elementsToSqueeze[i]);\n    }\n}\n\nconst elementsToSqueeze = [];\n\nfunction prepareElements () {\n    const elements = getElementsToSqueeze();\n    elements.map(function (element, index) {\n\n        logInfo(element.id);\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        elementsToSqueeze[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n        };\n\n        element.style.fontSize = \"1pt\";\n        element.style.width = \"fit-content\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\nfunction calculateSqueezedLetterSpacing(element, maxWidthPt, {\n    pxToPt = 0.75,          // 1px = 0.75pt (96dpi-n)\n    epsilonPt = 0.05,       // pontosság (pt)\n    maxIter = 20,           // bináris keresés lépések\n    minLSpt = -5,           // korlátok pt-ben\n    maxLSpt = 20\n} = {}) {\n\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    logInfo(\"--- CALCULATION STARTED\"); logInfo(\"\"); increaseIndentation();\n\n    // 1) Cél szélesség pt-ben\n    const targetPt = maxWidthPt * 1; // már pt-ben érkezik\n    const text = element.textContent || \"\";\n    const gaps = Math.max(0, text.length - 1);\n    if (gaps === 0) {\n        decreaseIndentation(); logInfo(\"\"); logInfo(\"--- CALCULATION ENDED\");\n        return parseFloat(getComputedStyle(element).letterSpacing) * pxToPt || 0;\n    }\n\n    // 2) Jelenlegi állapot (px-ben mérünk → pt-re váltunk)\n    let currentLSpx = parseFloat(getComputedStyle(element).letterSpacing);\n    if (Number.isNaN(currentLSpx)) currentLSpx = 0;\n    let currentLSPt = toPt(currentLSpx);\n\n    let currentWidthPt = getElementBoxWidth(element);\n    // let currentWidthPx = getElementBoxWidth(element);\n    // let currentWidthPt = toPt(currentWidthPx);\n\n    logInfo(\"targetPt: \" + targetPt);\n    logInfo(\"currentWidthPt: \" + currentWidthPt);\n    logInfo(\"text length: \" + text.length);\n    logInfo(\"currentLSPt: \" + currentLSPt + \"pt\");\n    logInfo(\"deltaPt: \" + (targetPt - currentWidthPt));\n\n    // 3) Első becslés (lineáris modell)\n    let guessPt = currentLSPt;\n    if (gaps > 0) {\n        const extraPerGapPt = (targetPt - currentWidthPt) / gaps;\n        guessPt = currentLSPt + extraPerGapPt;\n    }\n    guessPt = Math.max(minLSpt, Math.min(maxLSpt, guessPt));\n\n    // alkalmazzuk ideiglenesen (px-ben kell beírni a style-ba!)\n    element.style.letterSpacing = toPx(guessPt) + \"px\";\n\n    // mérés\n    let wPt = getElementBoxWidth(element);\n    if (Math.abs(wPt - targetPt) <= epsilonPt) {\n        logInfo(\"newLetterSpacing (pt): \" + guessPt);\n        decreaseIndentation(); logInfo(\"\"); logInfo(\"--- CALCULATION ENDED\");\n        return guessPt;\n    }\n\n    // 4) Bináris keresés a pontos illesztéshez\n    let loPt, hiPt;\n    if (wPt < targetPt) { loPt = guessPt; hiPt = maxLSpt; }\n    else { loPt = minLSpt; hiPt = guessPt; }\n\n    for (let i = 0; i < maxIter; i++) {\n        const midPt = (loPt + hiPt) / 2;\n        element.style.letterSpacing = toPx(midPt) + \"px\";\n\n        wPt = getElementBoxWidth(element);\n        const diff = wPt - targetPt;\n        if (Math.abs(diff) <= epsilonPt) {\n            guessPt = midPt;\n            break;\n        }\n        if (diff < 0) loPt = midPt; else hiPt = midPt;\n        guessPt = midPt;\n    }\n\n    logInfo(\"newLetterSpacing (pt): \" + guessPt);\n    decreaseIndentation(); logInfo(\"\"); logInfo(\"--- CALCULATION ENDED\");\n    return guessPt; // PT-ben ad vissza, a te konvencióddal egyezően\n}\n\nfunction calculateSqueezedLetterSpacing_ (element, maxWidthPt) {\n\n    const dpi = 0.74999943307122;\n    // const dpi = (runsInPrince ? 1 : 0.74999943307122);\n\n    logInfo(\"--- CALCULATION STARTED\");\n    logInfo(\"\");\n    increaseIndentation();\n\n    maxWidthPt = maxWidthPt * dpi;\n\n    // Gather current info\n    const text = element.textContent || \"\";\n\n    let currentLetterSpacing = parseFloat(window.getComputedStyle(element).letterSpacing) || 0;\n    currentLetterSpacing = currentLetterSpacing * dpi;\n\n    let currentWidth = getElementBoxWidth(element); // width in points or px, depending on environment\n    currentWidth = currentWidth * dpi;\n\n    logInfo(\"maxWidthPt: \" + maxWidthPt);\n    logInfo(\"currentWidth: \" + currentWidth);\n    logInfo(\"text: \" + (typeof text == \"undefined\"));\n    logInfo(\"text: \" + (typeof text == \"string\"));\n    logInfo(\"text: \" + (!!text));\n    logInfo(\"text: \" + ((!!text) ? \"AAA\" : \"BBB\"));\n    logInfo(\"text length: \" + ((!!text) ? text.length : 0));\n    logInfo(\"currentLetterSpacing: \" + currentLetterSpacing + \"pt (assuming)\");\n    logInfo(\"scale: \" + (maxWidthPt - currentWidth));\n\n    // If there is at least 2 characters, we have (text.length - 1) gaps\n    let newLetterSpacing = currentLetterSpacing;\n    if (text.length > 1) {\n        const extraSpacing = (maxWidthPt - currentWidth) / (text.length - 1);\n        newLetterSpacing = currentLetterSpacing + extraSpacing;\n    }\n\n    logInfo(\"newLetterSpacing: \" + newLetterSpacing);\n    decreaseIndentation();\n    logInfo(\"\");\n    logInfo(\"--- CALCULATION ENDED\");\n\n\n    return newLetterSpacing;\n}\n\nfunction squeezeLetterSpacing(s) {\n    logInfo(\"=== \" + s.element.id + \" ===\");\n\n    const originalLetterSpacing = parseFloat(window.getComputedStyle(s.element).letterSpacing) || 0;\n\n    console.log(\"originalLetterSpacing: \" + originalLetterSpacing);\n\n    const newLetterSpacingPt = calculateSqueezedLetterSpacing(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    s.element.style.letterSpacing = newLetterSpacingPt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// Adjust letter-spacing for all elements\nfunction squeezeAllLetterSpacing() {\n    for (var i in elementsToSqueezeSpacing) {\n        squeezeLetterSpacing(elementsToSqueezeSpacing[i]);\n    }\n}\n\nfunction getElementsToSqueezeLetterSpacing () {\n    const squeezeElements = document.querySelectorAll('.squeeze-spacing');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\n\nconst elementsToSqueezeSpacing = [];\n\n// Preparation logic remains mostly the same\nfunction prepareElementsForLetterSpacing() {\n    console.log(\"----------------------- prepareElementsForLetterSpacing\");\n    const elements = getElementsToSqueezeLetterSpacing();\n    elements.map(function (element, index) {\n        logInfo(element.id);\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n\n        if (!maxWidth || maxWidth === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n\n        elementsToSqueezeSpacing[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n        };\n\n        element.style.letterSpacing = \"0.1px\";\n        element.style.maxWidth = \"\";\n        element.style.width = \"fit-content\";\n        element.style.whiteSpace = \"nowrap\"; // Prevent wrapping\n    });\n}\n\nfunction convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    // logInfo(\"IN: \" + size);\n    // logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nfunction runSqueeze() {\n    prepareElements();\n    prepareElementsForLetterSpacing();\n\n    squeezeAll();\n    squeezeAllLetterSpacing();\n    handleSeparators();\n}\n\nexport default runSqueeze;","import handleSeparators from \"./separator.js\";\nimport logInfo from \"./logInfo\";\nimport smartCaps from \"./smart-caps\";\nimport squeeze from \"./squeeze\";\nimport runSqueeze from \"./squeeze\";\n\nlet templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nwindow.addEventListener('message', (event) => {\n    // console.log('Message received from parent:', event.data);\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!event.data.data || !sourceNode) {\n        return;\n    }\n\n    const data = {};\n    Object.keys(event.data.data).map((key) => {\n        if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n            data[key] = event.data.data[key][0].label;\n        } else {\n            data[key] = event.data.data[key];\n        }\n    });\n\n    if (event.data.msgId === \"dataChanged\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"getRenderedMarkup\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"zoom\") {\n        zoom(event.data.data / 100);\n    }\n\n});\n\nfunction scriptFromTheTemplate() {\n    logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n    scriptFromTheTemplate();\n    templateScripts();\n    // smartCaps();\n    // runSqueeze();\n    // handleSeparators();\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts};\n","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts() {\n\n    function init() {\n\n        setTemplateScripts(templateScripts);\n        const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    init();\n\n    window.__PROCESSING_DONE__ = true;\n}\n\nexport default addPodScripts;"],"names":["logInfo","info","console","log","handleSeparators","separatorNodeList","document","querySelectorAll","separators","Array","from","map","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","prevInNewLine","getYCoordinate","style","visibility","element","getBoundingClientRect","top","smartCaps","ignore","getTextNodesInSmartCap","root","arguments","length","undefined","result","elements","forEach","el","walker","createTreeWalker","NodeFilter","SHOW_TEXT","node","nextNode","text","nodeValue","trim","replace","word","lower","toLowerCase","includes","startsWith","prefix","slice","rest","charAt","toUpperCase","push","smartCapsNodeList","smartCap","indentIncrement","indent","getIndentation","indentation","i","increaseIndentation","decreaseIndentation","calculateSqueezedFontSize","maxFontSizePt","maxWidthPt","actualWidthPt","actualFontSizePt","scale","newFontSizePt","Math","min","getElementBoxWidth","convertToPt","width","squeeze","s","id","fontSize","toString","maxWidth","getElementsToSqueeze","squeezeElements","squeezeElementsWithParams","squeezeAll","elementsToSqueeze","prepareElements","index","window","getComputedStyle","maxFontSize","whiteSpace","calculateSqueezedLetterSpacing","_ref","_ref$pxToPt","pxToPt","_ref$epsilonPt","epsilonPt","_ref$maxIter","maxIter","_ref$minLSpt","minLSpt","_ref$maxLSpt","maxLSpt","toPt","px","toPx","pt","targetPt","textContent","gaps","max","parseFloat","letterSpacing","currentLSpx","Number","isNaN","currentLSPt","currentWidthPt","guessPt","extraPerGapPt","wPt","abs","loPt","hiPt","midPt","diff","squeezeLetterSpacing","originalLetterSpacing","newLetterSpacingPt","squeezeAllLetterSpacing","elementsToSqueezeSpacing","getElementsToSqueezeLetterSpacing","prepareElementsForLetterSpacing","size","dpi","pointsPerInch","conversionFactors","mm","cm","in","pc","em","rem","match","Error","value","unit","runSqueeze","templateScripts","setTemplateScripts","scripts","addEventListener","event","sourceNode","getElementById","data","Object","keys","key","isArray","label","msgId","renderTemplate","templateId","orderLineUuid","options","zoom","scriptFromTheTemplate","sendData","source","innerHTML","safeData","JSON","parse","stringify","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","parent","postMessage","ratio","addPodScripts","init","rendered","__PROCESSING_DONE__"],"mappings":"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"}