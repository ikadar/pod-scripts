{"version":3,"file":"pod.bundle.js","sources":["../src/logInfo.js","../src/separator.js","../src/smart-caps.js","../src/squeeze.js","../src/render-template.js","../src/pod-template-scripts.js"],"sourcesContent":["\nfunction logInfo (info) {\n    console.log(info);\n}\n\nexport default logInfo;","import logInfo from \"./logInfo\";\n\nconst handleSeparators = () => {\n\n    logInfo(\"HANDLING SEPARATORS 02 - 101\");\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    logInfo(\"SEPARATORS\", separators.length);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            logInfo(\"NEXT\", next);\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                logInfo(\"HIDE SEPARATOR\");\n                nextInNewLine = true;\n                // separator.style.visibility = \"hidden\";\n            // } else {\n            //     separator.style.visibility = \"visible\";\n            }\n        }\n\n        if (prev) {\n            logInfo(\"PREV\", prev);\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                logInfo(\"HIDE SEPARATOR\");\n                prevInNewLine = true;\n                // separator.style.visibility = \"hidden\";\n            // } else {\n            //     separator.style.visibility = \"visible\";\n            }\n        }\n\n        if (nextInNewLine || prevInNewLine) {\n            separator.style.visibility = \"hidden\";\n        } else {\n            separator.style.visibility = \"visible\";\n        }\n\n    });\n};\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","import logInfo from \"./logInfo\";\n\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    // d' l'\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n                        return word.charAt(0).toUpperCase() + word.slice(1);                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","import handleSeparators from \"./separator\";\n\nconst indentIncrement = 4;\nvar indent = 0;\nconst debug = true;\n\nfunction logInfo (info) {\n    if (debug) {\n        console.log(\"|\" + getIndentation() + info);\n    }\n}\n\nfunction getIndentation () {\n    var indentation = \"\";\n    for (var i=0; i<indent; i++) {\n        indentation = indentation + \" \";\n    }\n\n    return indentation;\n}\n\nfunction increaseIndentation () {\n    indent += indentIncrement;\n}\n\nfunction decreaseIndentation () {\n    indent -= indentIncrement;\n}\n\nfunction calculateSqueezedFontSize (maxFontSizePt, maxWidthPt, actualWidthPt, actualFontSizePt) {\n\n    logInfo(\"--- FONT SIZE CALCULATION STARTED\");\n    logInfo(\"\");\n    increaseIndentation();\n\n    const scale = maxWidthPt / actualWidthPt;\n    const newFontSizePt = scale;\n\n    logInfo(\"maxFontSizePt: \" + maxFontSizePt);\n    logInfo(\"actualFontSizePt: \" + actualFontSizePt);\n    logInfo(\"maxWidthPt: \" + maxWidthPt);\n    logInfo(\"actualWidthPt: \" + actualWidthPt);\n    logInfo(\"scale: \" + scale);\n    logInfo(\"NEW fontSize: \" + newFontSizePt);\n    logInfo(\"NEW fontSize: \" + Math.min(newFontSizePt, maxFontSizePt));\n\n    decreaseIndentation();\n\n    logInfo(\"\");\n    logInfo(\"--- FONT SIZE CALCULATION ENDED\");\n\n    // return newFontSizePt;\n    return Math.min(newFontSizePt, maxFontSizePt);\n}\n\nfunction getElementBoxWidth (el) {\n    return convertToPt(el.clientWidth + \"px\");\n}\n\nfunction squeeze (s) {\n    // console.log(s);\n    logInfo(\"=== \" + s.element.id + \" ===\");\n    var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), s.element.style.fontSize);\n    s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// get elements with squeeze and squeeze-[*] classes\nfunction getElementsToSqueeze () {\n    const squeezeElements = document.querySelectorAll('.squeeze');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction squeezeAll () {\n    // prepareElements();\n    for (var i in elementsToSqueeze) {\n        squeeze(elementsToSqueeze[i]);\n    }\n}\n\nconst elementsToSqueeze = [];\n\nfunction prepareElements () {\n    const elements = getElementsToSqueeze();\n    elements.map(function (element, index) {\n\n        logInfo(element.id);\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        elementsToSqueeze[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n        };\n\n        element.style.fontSize = \"1pt\";\n        element.style.width = \"\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\nfunction calculateSqueezedLetterSpacing (element, maxWidthPt) {\n\n    const dpi = 0.74999943307122;\n    // const dpi = (runsInPrince ? 1 : 0.74999943307122);\n\n    logInfo(\"--- CALCULATION STARTED\");\n    logInfo(\"\");\n    increaseIndentation();\n\n    maxWidthPt = maxWidthPt * dpi;\n\n    // Gather current info\n    const text = element.textContent || \"\";\n\n    let currentLetterSpacing = parseFloat(window.getComputedStyle(element).letterSpacing) || 0;\n    currentLetterSpacing = currentLetterSpacing * dpi;\n\n    let currentWidth = getElementBoxWidth(element); // width in points or px, depending on environment\n    currentWidth = currentWidth * dpi;\n\n    logInfo(\"maxWidthPt: \" + maxWidthPt);\n    logInfo(\"currentWidth: \" + currentWidth);\n    logInfo(\"text: \" + (typeof text == \"undefined\"));\n    logInfo(\"text: \" + (typeof text == \"string\"));\n    logInfo(\"text: \" + (!!text));\n    logInfo(\"text: \" + ((!!text) ? \"AAA\" : \"BBB\"));\n    logInfo(\"text length: \" + ((!!text) ? text.length : 0));\n    logInfo(\"currentLetterSpacing: \" + currentLetterSpacing + \"pt (assuming)\");\n    logInfo(\"scale: \" + (maxWidthPt - currentWidth));\n\n    // If there is at least 2 characters, we have (text.length - 1) gaps\n    let newLetterSpacing = currentLetterSpacing;\n    if (text.length > 1) {\n        const extraSpacing = (maxWidthPt - currentWidth) / (text.length - 1);\n        newLetterSpacing = currentLetterSpacing + extraSpacing;\n    }\n\n    logInfo(\"newLetterSpacing: \" + newLetterSpacing);\n    decreaseIndentation();\n    logInfo(\"\");\n    logInfo(\"--- CALCULATION ENDED\");\n\n\n    return newLetterSpacing;\n}\n\nfunction squeezeLetterSpacing(s) {\n    logInfo(\"=== \" + s.element.id + \" ===\");\n\n    const originalLetterSpacing = parseFloat(window.getComputedStyle(s.element).letterSpacing) || 0;\n\n    console.log(\"originalLetterSpacing: \" + originalLetterSpacing);\n\n    const newLetterSpacingPt = calculateSqueezedLetterSpacing(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    s.element.style.letterSpacing = newLetterSpacingPt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// Adjust letter-spacing for all elements\nfunction squeezeAllLetterSpacing() {\n    for (var i in elementsToSqueezeSpacing) {\n        squeezeLetterSpacing(elementsToSqueezeSpacing[i]);\n    }\n}\n\nfunction getElementsToSqueezeLetterSpacing () {\n    const squeezeElements = document.querySelectorAll('.squeeze-spacing');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\n\nconst elementsToSqueezeSpacing = [];\n\n// Preparation logic remains mostly the same\nfunction prepareElementsForLetterSpacing() {\n    console.log(\"----------------------- prepareElementsForLetterSpacing\");\n    const elements = getElementsToSqueezeLetterSpacing();\n    elements.map(function (element, index) {\n        logInfo(element.id);\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n\n        if (!maxWidth || maxWidth === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n\n        elementsToSqueezeSpacing[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n        };\n\n        element.style.letterSpacing = \"0.1px\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\"; // Prevent wrapping\n    });\n}\n\nfunction convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    logInfo(\"IN: \" + size);\n    logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nfunction runSqueeze() {\n    prepareElements();\n    prepareElementsForLetterSpacing();\n\n    squeezeAll();\n    squeezeAllLetterSpacing();\n    handleSeparators();\n}\n\nexport default runSqueeze;","import handleSeparators from \"./separator.js\";\nimport logInfo from \"./logInfo\";\nimport smartCaps from \"./smart-caps\";\nimport squeeze from \"./squeeze\";\nimport runSqueeze from \"./squeeze\";\n\nlet templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nwindow.addEventListener('message', (event) => {\n    // console.log('Message received from parent:', event.data);\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!event.data.data || !sourceNode) {\n        return;\n    }\n\n    const data = {};\n    Object.keys(event.data.data).map((key) => {\n        if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n            data[key] = event.data.data[key][0].label;\n        } else {\n            data[key] = event.data.data[key];\n        }\n    });\n\n    if (event.data.msgId === \"dataChanged\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"getRenderedMarkup\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"zoom\") {\n        zoom(event.data.data / 100);\n    }\n\n});\n\nfunction scriptFromTheTemplate() {\n    logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n    scriptFromTheTemplate();\n    templateScripts();\n    // smartCaps();\n    // runSqueeze();\n    // handleSeparators();\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts};\n","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts() {\n\n    function init() {\n\n        setTemplateScripts(templateScripts);\n        const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    init();\n\n    window.__PROCESSING_DONE__ = true;\n}\n\nexport default addPodScripts;"],"names":["logInfo","info","console","log","handleSeparators","separatorNodeList","document","querySelectorAll","separators","Array","from","length","map","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","prevInNewLine","getYCoordinate","style","visibility","element","getBoundingClientRect","top","smartCaps","ignore","getTextNodesInSmartCap","root","arguments","undefined","result","elements","forEach","el","walker","createTreeWalker","NodeFilter","SHOW_TEXT","node","nextNode","text","nodeValue","trim","replace","word","lower","toLowerCase","includes","charAt","toUpperCase","slice","push","smartCapsNodeList","smartCap","indentIncrement","indent","getIndentation","indentation","i","increaseIndentation","decreaseIndentation","calculateSqueezedFontSize","maxFontSizePt","maxWidthPt","actualWidthPt","actualFontSizePt","scale","newFontSizePt","Math","min","getElementBoxWidth","convertToPt","clientWidth","squeeze","s","id","fontSize","toString","maxWidth","getElementsToSqueeze","squeezeElements","squeezeElementsWithParams","squeezeAll","elementsToSqueeze","prepareElements","index","window","getComputedStyle","maxFontSize","width","whiteSpace","calculateSqueezedLetterSpacing","dpi","textContent","currentLetterSpacing","parseFloat","letterSpacing","currentWidth","newLetterSpacing","extraSpacing","squeezeLetterSpacing","originalLetterSpacing","newLetterSpacingPt","squeezeAllLetterSpacing","elementsToSqueezeSpacing","getElementsToSqueezeLetterSpacing","prepareElementsForLetterSpacing","size","pointsPerInch","conversionFactors","pt","px","mm","cm","in","pc","em","rem","match","Error","value","unit","runSqueeze","templateScripts","setTemplateScripts","scripts","addEventListener","event","sourceNode","getElementById","data","Object","keys","key","isArray","label","msgId","renderTemplate","templateId","orderLineUuid","options","zoom","scriptFromTheTemplate","sendData","source","innerHTML","safeData","JSON","parse","stringify","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","parent","postMessage","ratio","addPodScripts","init","rendered","__PROCESSING_DONE__"],"mappings":"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"}