{"version":3,"file":"pod.bundle.js","sources":["../src/separator.js","../src/render-template.js","../src/smart-caps.js","../src/conversion.js","../src/measurement.js","../src/squeeze/squeeze-font-size.js","../src/squeeze/squeeze-letter-spacing.js","../src/squeeze/squeeze-scaling.js","../src/squeeze.js","../src/pod-template-scripts.js"],"sourcesContent":["import logInfo from \"./log-info\";\n\nconst handleSeparators = () => {\n\n    // logInfo(\"HANDLING SEPARATORS\");\n\n    const results = Array.from(document.querySelectorAll('[class*=\"separator-[\"]'))\n        .map(el => {\n            const m = el.className.match(/separator-\\[([^\\]]+)\\]/);\n            return m ? { element: el, value: m[1] } : null;\n        })\n        .filter(Boolean);\n\n    results.forEach(({ element, value }) => {\n        const textNodes = getAllTextNodes(element);\n        textNodes.forEach(node => wrapMatchesWithSeparatorAndSegments(node, value));\n    });\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                nextInNewLine = true;\n            }\n        }\n\n        if (prev) {\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                prevInNewLine = true;\n            }\n        }\n\n        if (nextInNewLine) {\n            separator.style.visibility = \"hidden\";\n        } else {\n            separator.style.visibility = \"visible\";\n        }\n\n        if (prevInNewLine) {\n            separator.style.display = \"none\";\n        } else {\n            separator.style.display = \"inline\";\n        }\n\n    });\n};\n\nfunction getAllTextNodes(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false);\n    const nodes = [];\n    let n;\n    while ((n = walker.nextNode())) nodes.push(n);\n    return nodes;\n}\n\nfunction wrapMatchesWithSeparatorAndSegments(textNode, value) {\n    if (!value) return;\n    const text = textNode.nodeValue;\n    const valLen = value.length;\n    if (!valLen) return;\n\n    let idx = text.indexOf(value);\n    if (idx === -1) return; // nincs találat ebben a node-ban\n\n    const frag = document.createDocumentFragment();\n    let start = 0;\n\n    while (idx !== -1) {\n        const before = text.slice(start, idx);\n\n        // 1) value ELŐTTI rész: ha van nem-whitespace tartalom, csomagoljuk <span>-be\n        const beforeTrim = before.trim();\n        if (beforeTrim.length > 0) {\n            const spanBefore = document.createElement('span');\n            spanBefore.textContent = beforeTrim;\n            frag.appendChild(spanBefore);\n        } else {\n            // ha csak whitespace volt, azt hagyjuk figyelmen kívül – a separator elé úgyis beszúrunk 1 szóközt\n        }\n\n        // 2) kötelező space a separator ELÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // 3) a separator maga\n        const sep = document.createElement('span');\n        sep.className = 'separator';\n        sep.textContent = value;\n        frag.appendChild(sep);\n\n        // 4) kötelező space a separator MÖGÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // következő keresési ablak\n        start = idx + valLen;\n        idx = text.indexOf(value, start);\n    }\n\n    // 5) értékeljük a LEGUTOLSÓ találat UTÁNI részt\n    const after = text.slice(start);\n    const afterTrim = after.trim();\n\n    if (afterTrim.length > 0) {\n        // ha van tartalom, az tartalom legyen spanban, a whitespace-ek maradjanak külön text node-ként\n        const leadingWs = after.match(/^\\s*/)?.[0] ?? '';\n        const trailingWs = after.match(/\\s*$/)?.[0] ?? '';\n        if (leadingWs) frag.appendChild(document.createTextNode(leadingWs));\n\n        const spanAfter = document.createElement('span');\n        spanAfter.textContent = afterTrim;\n        frag.appendChild(spanAfter);\n\n        if (trailingWs) frag.appendChild(document.createTextNode(trailingWs));\n    } else {\n        // csak whitespace maradt → tegyük vissza változatlanul\n        if (after) frag.appendChild(document.createTextNode(after));\n    }\n\n    // 6) cseréljük a text node-ot az új tartalomra\n    textNode.parentNode?.replaceChild(frag, textNode);\n}\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","import logInfo from \"./log-info\";\n\nlet templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nwindow.addEventListener('message', (event) => {\n    // console.log('Message received from parent:', event.data);\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!event.data.data || !sourceNode) {\n        return;\n    }\n\n    const data = {};\n    Object.keys(event.data.data).map((key) => {\n        if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n            data[key] = event.data.data[key][0].label;\n        } else {\n            data[key] = event.data.data[key];\n        }\n    });\n\n    if (event.data.msgId === \"dataChanged\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"getRenderedMarkup\") {\n        renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n        zoom(event.data.zoom / 100);\n    }\n\n    if (event.data.msgId === \"zoom\") {\n        zoom(event.data.data / 100);\n    }\n\n});\n\nfunction scriptFromTheTemplate() {\n    // logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n    scriptFromTheTemplate();\n    templateScripts();\n    // smartCaps();\n    // runSqueeze();\n    // handleSeparators();\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts};\n","\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n\n                        if (lower.startsWith(\"d'\") || lower.startsWith(\"l'\")) {\n                            const prefix = lower.slice(0, 2); // \"d'\" or \"l'\"\n                            const rest = lower.slice(2);\n                            return prefix + rest.charAt(0).toUpperCase() + rest.slice(1);\n                        }\n\n                        return word.charAt(0).toUpperCase() + word.slice(1);\n                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        // logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","function convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    // const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n    const match = size.match(/^-?([\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    // logInfo(\"IN: \" + size);\n    // logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nexport default convertToPt;","import convertToPt from \"./conversion\";\n\nfunction getElementBoxWidth (el) {\n\n    const computedStyle = window.getComputedStyle(el);\n    el.style.maxWidth = \"\";\n    el.style.whiteSpace = \"nowrap\";\n\n    const boxWidth = convertToPt(el.getBoundingClientRect().width + \"px\");\n\n    el.style.maxWidth = computedStyle.maxWidth;\n    el.style.whiteSpace = computedStyle.whiteSpace; //\n\n    return boxWidth;\n}\n\nfunction getTextNodeLineCount(textNode) {\n    if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return 0;\n\n    const range = document.createRange();\n    range.selectNodeContents(textNode);\n\n    // Ez egy NodeList-szerű objektum, minden rect egy sor vagy fragment\n    const rects = range.getClientRects();\n\n    return rects.length;\n}\n\nexport {getElementBoxWidth, getTextNodeLineCount};","import convertToPt from \"../conversion\";\nimport {getElementBoxWidth, getTextNodeLineCount} from \"../measurement\";\n\nconst elementsToSqueeze = [];\n\nfunction calculateSqueezedFontSize (maxFontSizePt, maxWidthPt, actualWidthPt, actualFontSizePt) {\n\n    const scale = maxWidthPt / actualWidthPt;\n    const newFontSizePt = parseFloat(actualFontSizePt) * scale;\n    // return newFontSizePt;\n    return Math.min(newFontSizePt, maxFontSizePt);\n}\n\nfunction squeeze (s) {\n    // console.log(s);\n\n    const rowCount = getTextNodeLineCount(s.element.childNodes[0]);\n    if (rowCount <= s.maxRows && s.maxRows > 1) {\n        return;\n    }\n\n    if (s.maxRows > 1) {\n        fitTextToMaxRows(s.element.childNodes[0], s.maxRows, {\n            minFontSize: s.minFontSizePt\n        });\n        return;\n    }\n\n    const actualFontSize = convertToPt(window.getComputedStyle(s.element).fontSize);\n\n    var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), actualFontSize);\n    // var newFontSizePt = calculateSqueezedFontSize(s.maxFontSizePt, s.maxWidthPt, getElementBoxWidth(s.element), s.element.style.fontSize);\n    newFontSizePt = Math.max(newFontSizePt, s.minFontSizePt);\n    s.element.style.fontSize = newFontSizePt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// get elements with squeeze and squeeze-[*] classes\nfunction getElementsToSqueeze () {\n    const squeezeElements = document.querySelectorAll('.squeeze');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction squeezeAll () {\n    // prepareElements();\n    for (var i in elementsToSqueeze) {\n        squeeze(elementsToSqueeze[i]);\n    }\n}\n\nfunction prepareElements () {\n    const elements = getElementsToSqueeze();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        let maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-font-size-'))?.match(/^max-font-size-\\[([^\\]]+)\\]$/);\n        const maxFontSizePt = maxMatch ? convertToPt(maxMatch[1]) : convertToPt(maxFontSize);\n        const minMatch = classArray.find(c => c.startsWith('min-font-size-'))?.match(/^min-font-size-\\[([^\\]]+)\\]$/);\n        const minFontSizePt = minMatch ? convertToPt(minMatch[1]) : null;\n\n        const maxRowsMatch = classArray.find(c => c.startsWith('max-rows-'))?.match(/^max-rows-\\[([^\\]]+)\\]$/);\n        const maxRows = maxRowsMatch ? maxRowsMatch[1] : 1;\n\n        const maxWidthPt = convertToPt(maxWidth);\n        // const maxFontSizePt = convertToPt(maxFontSize);\n\n        elementsToSqueeze[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            minFontSizePt: minFontSizePt,\n            maxRows: maxRows,\n        };\n\n        // element.style.fontSize = \"1pt\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        // element.style.maxWidth = \"\";\n        // element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n// ---------\n\nfunction fitTextToMaxRows(textNode, maxRowCount, {\n    minFontSize = 6,         // px\n    step = 0.5,              // mennyivel csökkentsen egy lépésben\n    maxIter = 50,            // végtelen ciklus elkerülésére\n} = {}) {\n    if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return;\n\n    const parent = textNode.parentElement;\n    if (!parent) return;\n\n    let style = window.getComputedStyle(parent);\n    let currentFontSizePt = convertToPt(`${parseFloat(style.fontSize)}px`); // px-ben\n    let iter = 0;\n\n    while (iter < maxIter) {\n        const rowCount = getTextNodeLineCount(textNode);\n        if (rowCount <= maxRowCount) break;\n\n        currentFontSizePt = Math.max(currentFontSizePt - step, minFontSize);\n        parent.style.fontSize = `${currentFontSizePt}pt`;\n\n        iter++;\n    }\n\n    console.log(iter);\n\n}\n\nexport { prepareElements, squeezeAll };","import {getElementBoxWidth, getTextNodeLineCount} from \"../measurement\";\nimport convertToPt from \"../conversion\";\n\nconst elementsToSqueezeSpacing = [];\n\nfunction calculateSqueezedLetterSpacing(element, maxWidthPt, {\n    pxToPt = 0.74999943307122,          // 1px = 0.75pt (96dpi-n)\n    epsilonPt = 0.05,       // pontosság (pt)\n    maxIter = 20,           // bináris keresés lépések\n    minLSpt = -5,           // korlátok pt-ben\n    maxLSpt = 20\n} = {}) {\n\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség pt-ben\n    const targetPt = maxWidthPt * 1; // már pt-ben érkezik\n    const text = element.textContent || \"\";\n    const gaps = Math.max(0, text.length - 1);\n    if (gaps === 0) {\n        return parseFloat(getComputedStyle(element).letterSpacing) * pxToPt || 0;\n    }\n\n    // 2) Jelenlegi állapot (px-ben mérünk → pt-re váltunk)\n    let currentLSpx = parseFloat(getComputedStyle(element).letterSpacing);\n    if (Number.isNaN(currentLSpx)) currentLSpx = 0;\n    let currentLSPt = toPt(currentLSpx);\n\n    let currentWidthPt = getElementBoxWidth(element);\n\n    // 3) Első becslés (lineáris modell)\n    let guessPt = currentLSPt;\n    if (gaps > 0) {\n        const extraPerGapPt = (targetPt - currentWidthPt) / gaps;\n        guessPt = currentLSPt + extraPerGapPt;\n    }\n    guessPt = Math.max(minLSpt, Math.min(maxLSpt, guessPt));\n\n    // alkalmazzuk ideiglenesen (px-ben kell beírni a style-ba!)\n    element.style.letterSpacing = toPx(guessPt) + \"px\";\n\n    // mérés\n    let wPt = getElementBoxWidth(element);\n    if (Math.abs(wPt - targetPt) <= epsilonPt) {\n        return guessPt;\n    }\n\n    // 4) Bináris keresés a pontos illesztéshez\n    let loPt, hiPt;\n    if (wPt < targetPt) { loPt = guessPt; hiPt = maxLSpt; }\n    else { loPt = minLSpt; hiPt = guessPt; }\n\n    for (let i = 0; i < maxIter; i++) {\n        const midPt = (loPt + hiPt) / 2;\n        element.style.letterSpacing = toPx(midPt) + \"px\";\n\n        wPt = getElementBoxWidth(element);\n        const diff = wPt - targetPt;\n        if (Math.abs(diff) <= epsilonPt) {\n            guessPt = midPt;\n            break;\n        }\n        if (diff < 0) loPt = midPt; else hiPt = midPt;\n        guessPt = midPt;\n    }\n\n    return guessPt; // PT-ben ad vissza, a te konvencióddal egyezően\n}\n\nfunction squeezeLetterSpacing(s) {\n\n    const rowCount = getTextNodeLineCount(s.element.childNodes[0]);\n    if (rowCount <= s.maxRows && s.maxRows > 1) {\n        return;\n    }\n\n    if (s.maxRows > 1) {\n        fitTextToMaxRows(s.element.childNodes[0], s.maxRows, {\n            minFontSize: s.minFontSizePt\n        });\n        return;\n    }\n\n\n    const newLetterSpacingPt = calculateSqueezedLetterSpacing(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const finalLetterSpacingPt = Math.max(Math.min(newLetterSpacingPt, s.maxLetterSpacingPt), s.minLetterSpacingPt);\n\n    s.element.style.letterSpacing = finalLetterSpacingPt.toString() + \"pt\";\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n// Adjust letter-spacing for all elements\nfunction squeezeAllLetterSpacing() {\n    for (var i in elementsToSqueezeSpacing) {\n        squeezeLetterSpacing(elementsToSqueezeSpacing[i]);\n    }\n}\n\nfunction getElementsToSqueezeLetterSpacing () {\n    const squeezeElements = document.querySelectorAll('.squeeze-spacing');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\n// Preparation logic remains mostly the same\nfunction prepareElementsForLetterSpacing() {\n    const elements = getElementsToSqueezeLetterSpacing();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n\n        if (!maxWidth || maxWidth === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-letter-spacing-'))?.match(/^max-letter-spacing-\\[([^\\]]+)\\]$/);\n        const maxLetterSpacingPt = maxMatch ? convertToPt(maxMatch[1]) : null;\n        const minMatch = classArray.find(c => c.startsWith('min-letter-spacing-'))?.match(/^min-letter-spacing-\\[([^\\]]+)\\]$/);\n        const minLetterSpacingPt = minMatch ? convertToPt(minMatch[1]) : null;\n\n        elementsToSqueezeSpacing[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxLetterSpacingPt: maxLetterSpacingPt,\n            minLetterSpacingPt: minLetterSpacingPt,\n        };\n\n        element.style.letterSpacing = \"0.1px\";\n        element.style.maxWidth = \"\";\n        // element.style.width = \"fit-content\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.whiteSpace = \"nowrap\"; // Prevent wrapping\n    });\n}\n\nexport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing };\n\n\n","import convertToPt from \"../conversion\";\n\nconst elementsToSqueezeScaling = [];\n\nfunction getElementsToScaling () {\n    const squeezeElements = document.querySelectorAll('.squeeze-scaling');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction prepareElementsForScaling() {\n    const elements = getElementsToScaling();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        const maxWidthPt = convertToPt(maxWidth);\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-scale-'))?.match(/^max-scale-\\[([^\\]]+)\\]$/);\n        const maxScale = maxMatch ? maxMatch[1] : null;\n        const minMatch = classArray.find(c => c.startsWith('min-scale-'))?.match(/^min-scale-\\[([^\\]]+)\\]$/);\n        const minScale = minMatch ? minMatch[1] : null;\n\n        elementsToSqueezeScaling[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            maxScale: maxScale,\n            minScale: minScale,\n        };\n\n        element.style.transform = \"scale(1, 1)\";\n        element.style.transformOrigin = \"left center\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n/**\n * A szöveg szélességét scale-lel illeszti a kívánt maxWidthPt-re.\n * - csak X irányban skáláz (alapértelmezés), Y-t 1-en hagyja\n * - pt-ben (printer world) számol, a style-ba px alapú scale kerül\n * - megtartja az eredeti transformot (előre teszi a scale-t)\n *\n * @param {HTMLElement} element   - a skálázandó elem\n * @param {number}      maxWidthPt- cél szélesség pt-ben\n * @param {object}      opts\n *    pxToPt=0.75       - 1px = 0.75pt (96 dpi)\n *    axis='x'          - 'x' | 'uniform'  ('uniform' esetén X=Y skála)\n *    minScale=0.2      - skála alsó korlát\n *    maxScale=5        - skála felső korlát\n *    epsilon=0.05      - engedett hiba (pt)\n *    maxIter=5         - legfeljebb ennyiszer finomít\n *    setOrigin=true    - bal szélre állítja a transform-origin-t\n *\n * @returns {number}    - a végső X scale érték\n */\nfunction calculateSqueezedScale(\n    element,\n    maxWidthPt,\n    {\n        pxToPt = 0.74999943307122,\n        axis = 'x',         // 'x' vagy 'uniform'\n        minScale = 0.2,\n        maxScale = 5,\n        epsilon = 0.05,\n        maxIter = 5,\n        setOrigin = true,\n    } = {}\n) {\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség px-ben\n    const targetPx = toPx(maxWidthPt);\n\n    // 2) Eredeti transform elmentése, méréshez ideiglenesen kikapcsoljuk a skálát\n    const prevTransform = element.style.transform || '';\n    const prevOrigin = element.style.transformOrigin || '';\n\n    // a legegyszerűbb és legstabilabb: ideiglenesen 'none', hogy a nyers szélességet mérjük\n    element.style.transform = 'none';\n    if (setOrigin) element.style.transformOrigin = 'left center';\n\n    // 3) Nyers (skála nélküli) szélesség\n    const baseWidthPx = element.getBoundingClientRect().width || 0;\n    if (baseWidthPx <= 0) {\n        // nincs értelmezhető szélesség – ne robbanjon\n        element.style.transform = prevTransform;\n        element.style.transformOrigin = prevOrigin;\n        return 1;\n    }\n\n    // 4) Első becslés: arányos skála\n    let sx = clamp(targetPx / baseWidthPx, minScale, maxScale);\n    let sy = (axis === 'uniform') ? sx : 1;\n\n    // alkalmazzuk: a scale-t előre tesszük, a meglévő transform megmarad\n    element.style.transform = `scale(${sx}, ${sy})`.trim();\n    // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n\n    // 5) Finomhangolás (iteratív, gyors konvergencia)\n    for (let i = 0; i < maxIter; i++) {\n        const w = element.getBoundingClientRect().width;\n        const diffPx = targetPx - w;\n        if (Math.abs(toPt(diffPx)) <= epsilon) break;\n\n        // multiplikatív korrekció: új sx = régi sx * (cél / mért)\n        const factor = targetPx / (w || 1);\n        sx = clamp(sx * factor, minScale, maxScale);\n        sy = (axis === 'uniform') ? sx : 1;\n        element.style.transform = `scale(${sx}, ${sy})`.trim();\n        // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n    }\n\n    // (opcionális) ha nem akarsz origin-t hagyni:\n    if (!setOrigin) element.style.transformOrigin = prevOrigin;\n\n    return sx;\n\n    function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }\n}\n\n\n\nfunction squeezeScale(s) {\n\n    const originalLetterSpacing = parseFloat(window.getComputedStyle(s.element).letterSpacing) || 0;\n\n    const newScale = calculateSqueezedScale(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const maxScale = s.maxScale ?? newScale;\n    const minScale = s.minScale ?? newScale;\n    const finalScale = Math.max(Math.min(newScale, Number(maxScale)), Number(minScale));\n    const finalScaleString = `scale(${finalScale}, 1)`;\n\n    s.element.style.transform = finalScaleString;\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n\nfunction squeezeAllScaling() {\n    for (var i in elementsToSqueezeScaling) {\n        squeezeScale(elementsToSqueezeScaling[i]);\n    }\n}\n\nexport { prepareElementsForScaling, squeezeAllScaling };\n","import handleSeparators from \"./separator\";\nimport { prepareElements, squeezeAll } from \"./squeeze/squeeze-font-size\";\nimport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing } from \"./squeeze/squeeze-letter-spacing\";\nimport { prepareElementsForScaling, squeezeAllScaling } from \"./squeeze/squeeze-scaling\";\n\nfunction runSqueeze() {\n    prepareElements();\n    prepareElementsForLetterSpacing();\n    prepareElementsForScaling();\n\n    squeezeAll();\n    squeezeAllLetterSpacing();\n    squeezeAllScaling();\n\n    // handleSeparators();\n}\n\nexport default runSqueeze;","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts() {\n\n    function init() {\n\n        setTemplateScripts(templateScripts);\n        const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    init();\n\n    window.__PROCESSING_DONE__ = true;\n}\n\nexport default addPodScripts;"],"names":["handleSeparators","results","Array","from","document","querySelectorAll","map","el","m","className","match","element","value","filter","Boolean","forEach","_ref","textNodes","getAllTextNodes","node","wrapMatchesWithSeparatorAndSegments","separatorNodeList","separators","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","prevInNewLine","getYCoordinate","style","visibility","display","root","walker","createTreeWalker","NodeFilter","SHOW_TEXT","nodes","n","nextNode","push","textNode","_textNode$parentNode","text","nodeValue","valLen","length","idx","indexOf","frag","createDocumentFragment","start","before","slice","beforeTrim","trim","spanBefore","createElement","textContent","appendChild","createTextNode","sep","after","afterTrim","_after$match$","_after$match","_after$match$2","_after$match2","leadingWs","trailingWs","spanAfter","parentNode","replaceChild","getBoundingClientRect","top","templateScripts","setTemplateScripts","scripts","window","addEventListener","event","sourceNode","getElementById","data","Object","keys","key","isArray","label","msgId","renderTemplate","templateId","orderLineUuid","options","zoom","sendData","source","innerHTML","safeData","JSON","parse","stringify","replace","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","parent","postMessage","ratio","scale","smartCaps","ignore","getTextNodesInSmartCap","arguments","undefined","result","elements","word","lower","toLowerCase","includes","startsWith","prefix","rest","charAt","toUpperCase","smartCapsNodeList","smartCap","convertToPt","size","dpi","pointsPerInch","conversionFactors","pt","px","mm","cm","in","pc","em","rem","Error","parseFloat","unit","getElementBoxWidth","computedStyle","getComputedStyle","maxWidth","whiteSpace","boxWidth","width","getTextNodeLineCount","nodeType","Node","TEXT_NODE","range","createRange","selectNodeContents","rects","getClientRects","elementsToSqueeze","calculateSqueezedFontSize","maxFontSizePt","maxWidthPt","actualWidthPt","actualFontSizePt","newFontSizePt","Math","min","squeeze","s","rowCount","childNodes","maxRows","fitTextToMaxRows","minFontSize","minFontSizePt","actualFontSize","fontSize","max","toString","getElementsToSqueeze","squeezeElements","squeezeElementsWithParams","i","squeezeAll","prepareElements","index","_classArray$find","_classArray$find2","_classArray$find3","maxFontSize","classArray","classList","maxMatch","find","c","minMatch","maxRowsMatch","flex","alignSelf","maxRowCount","_ref$minFontSize","_ref$step","step","_ref$maxIter","maxIter","parentElement","currentFontSizePt","concat","iter","console","log","elementsToSqueezeSpacing","calculateSqueezedLetterSpacing","_ref$pxToPt","pxToPt","_ref$epsilonPt","epsilonPt","_ref$minLSpt","minLSpt","_ref$maxLSpt","maxLSpt","toPt","toPx","targetPt","gaps","letterSpacing","currentLSpx","Number","isNaN","currentLSPt","currentWidthPt","guessPt","extraPerGapPt","wPt","abs","loPt","hiPt","midPt","diff","squeezeLetterSpacing","newLetterSpacingPt","finalLetterSpacingPt","maxLetterSpacingPt","minLetterSpacingPt","squeezeAllLetterSpacing","getElementsToSqueezeLetterSpacing","prepareElementsForLetterSpacing","elementsToSqueezeScaling","getElementsToScaling","prepareElementsForScaling","maxScale","minScale","transform","transformOrigin","calculateSqueezedScale","_ref$axis","axis","_ref$minScale","_ref$maxScale","_ref$epsilon","epsilon","_ref$setOrigin","setOrigin","targetPx","prevTransform","prevOrigin","baseWidthPx","sx","clamp","sy","w","diffPx","factor","v","lo","hi","squeezeScale","_s$maxScale","_s$minScale","newScale","finalScale","finalScaleString","squeezeAllScaling","runSqueeze","addPodScripts","init","rendered","__PROCESSING_DONE__"],"mappings":"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"}