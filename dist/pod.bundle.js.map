{"version":3,"file":"pod.bundle.js","sources":["../src/separator.js","../src/conversion.js","../src/measurement.js","../src/squeeze/squeeze-scaling.js","../src/render-template.js","../src/smart-caps.js","../src/squeeze.js","../src/post-msg-handler.js","../src/pod-template-scripts.js"],"sourcesContent":["import logInfo from \"./log-info\";\n\nconst handleSeparators = () => {\n\n    // logInfo(\"HANDLING SEPARATORS\");\n\n    const results = Array.from(document.querySelectorAll('[class*=\"separator-[\"]'))\n        .map(el => {\n            const m = el.className.match(/separator-\\[([^\\]]+)\\]/);\n            return m ? { element: el, value: m[1] } : null;\n        })\n        .filter(Boolean);\n\n    results.forEach(({ element, value }) => {\n        const textNodes = getAllTextNodes(element);\n        textNodes.forEach(node => wrapMatchesWithSeparatorAndSegments(node, value));\n    });\n\n    const separatorNodeList = document.querySelectorAll(\".separator\");\n    const separators = Array.from(separatorNodeList);\n\n    separators.map((separator) => {\n        const next = separator.nextElementSibling;\n        const prev = separator.previousElementSibling;\n\n        let nextInNewLine = false;\n        let prevInNewLine = false;\n\n        if (next) {\n            if (getYCoordinate(separator) !== getYCoordinate(next)) {\n                nextInNewLine = true;\n            }\n        }\n\n        if (prev) {\n            if (getYCoordinate(separator) !== getYCoordinate(prev)) {\n                prevInNewLine = true;\n            }\n        }\n\n        if (nextInNewLine) {\n            separator.style.visibility = \"hidden\";\n        } else {\n            separator.style.visibility = \"visible\";\n        }\n\n        if (prevInNewLine) {\n            separator.style.display = \"none\";\n        } else {\n            separator.style.display = \"inline\";\n        }\n\n    });\n};\n\nfunction getAllTextNodes(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false);\n    const nodes = [];\n    let n;\n    while ((n = walker.nextNode())) nodes.push(n);\n    return nodes;\n}\n\nfunction wrapMatchesWithSeparatorAndSegments(textNode, value) {\n    if (!value) return;\n    const text = textNode.nodeValue;\n    const valLen = value.length;\n    if (!valLen) return;\n\n    let idx = text.indexOf(value);\n    if (idx === -1) return; // nincs találat ebben a node-ban\n\n    const frag = document.createDocumentFragment();\n    let start = 0;\n\n    while (idx !== -1) {\n        const before = text.slice(start, idx);\n\n        // 1) value ELŐTTI rész: ha van nem-whitespace tartalom, csomagoljuk <span>-be\n        const beforeTrim = before.trim();\n        if (beforeTrim.length > 0) {\n            const spanBefore = document.createElement('span');\n            spanBefore.textContent = beforeTrim;\n            frag.appendChild(spanBefore);\n        } else {\n            // ha csak whitespace volt, azt hagyjuk figyelmen kívül – a separator elé úgyis beszúrunk 1 szóközt\n        }\n\n        // 2) kötelező space a separator ELÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // 3) a separator maga\n        const sep = document.createElement('span');\n        sep.className = 'separator';\n        sep.textContent = value;\n        frag.appendChild(sep);\n\n        // 4) kötelező space a separator MÖGÉ\n        frag.appendChild(document.createTextNode(' '));\n\n        // következő keresési ablak\n        start = idx + valLen;\n        idx = text.indexOf(value, start);\n    }\n\n    // 5) értékeljük a LEGUTOLSÓ találat UTÁNI részt\n    const after = text.slice(start);\n    const afterTrim = after.trim();\n\n    if (afterTrim.length > 0) {\n        // ha van tartalom, az tartalom legyen spanban, a whitespace-ek maradjanak külön text node-ként\n        const leadingWs = after.match(/^\\s*/)?.[0] ?? '';\n        const trailingWs = after.match(/\\s*$/)?.[0] ?? '';\n        if (leadingWs) frag.appendChild(document.createTextNode(leadingWs));\n\n        const spanAfter = document.createElement('span');\n        spanAfter.textContent = afterTrim;\n        frag.appendChild(spanAfter);\n\n        if (trailingWs) frag.appendChild(document.createTextNode(trailingWs));\n    } else {\n        // csak whitespace maradt → tegyük vissza változatlanul\n        if (after) frag.appendChild(document.createTextNode(after));\n    }\n\n    // 6) cseréljük a text node-ot az új tartalomra\n    textNode.parentNode?.replaceChild(frag, textNode);\n}\n\nconst getYCoordinate = (element) => {\n    return element.getBoundingClientRect().top;\n};\n\nexport default handleSeparators;\n","function convertToPt(size) {\n\n    var dpi = 74.999943307122;\n\n    const pointsPerInch = 72; // 1 inch = 72 points\n    // const pointsPerInch = dpi; // 1 inch = 72 points\n    const conversionFactors = {\n        pt: 1,                         // 1 pt = 1 pt\n//        px: pointsPerInch / dpi,       // px to pt depends on DPI\n        px: dpi / 100,       // px to pt depends on DPI\n        mm: 3.7795275591 * dpi / 100,  // 1 mm = 1 inch / 25.4\n        // mm: pointsPerInch / 25.4,   // 1 mm = 1 inch / 25.4\n        cm: pointsPerInch / 2.54,      // 1 cm = 1 inch / 2.54\n        in: 96 * dpi / 100,            // 1 inch = 72 pt\n        // in: pointsPerInch,          // 1 inch = 72 pt\n        pc: 16 * dpi,                  // 1 pica (pc) = 12 pt\n        em: 16 * dpi,                  // Assuming 1 em ≈ 12 pt (adjust if needed)\n        rem: 16 * dpi                  // Assuming 1 rem ≈ 12 pt (adjust if needed)\n    };\n\n    // Extract the numeric value and the unit from the size string\n    // const match = size.match(/^([\\d.]+)([a-z%]*)$/i);\n    // const match = size.match(/^-?([\\d.]+)([a-z%]*)$/i);\n    const match = size.match(/^(-?[\\d.]+)([a-z%]*)$/i);\n\n    if (!match) {\n        throw new Error(\"Invalid size format: \" + size);\n    }\n\n    const value = parseFloat(match[1]);\n    let unit = match[2].toLowerCase();\n\n    // If no unit is provided, assume 'px' by default\n    if (!unit) {\n        unit = \"px\";\n    }\n\n    if (!conversionFactors[unit]) {\n        throw new Error(\"Unsupported unit: \" + unit);\n    }\n\n    // logInfo(\"IN: \" + size);\n    // logInfo(\"OUT: \" + value * conversionFactors[unit]);\n\n    return value * conversionFactors[unit];\n\n}\n\nexport default convertToPt;","import convertToPt from \"./conversion\";\n\n/**\n * Megméri egy elem „természetes” szélességét: max-width nélkül, egy sorban.\n * A mérés előtt megvárja a webfontok betöltését.\n * Visszatérési érték: px (number). Ha pt kell, szorozd 0.75-tel (96dpi).\n */\nfunction getElementBoxWidth(el) {\n    if (!(el instanceof Element)) throw new Error('measureInlineWidthNowrap: el must be Element');\n\n    // 1) várj a fontokra (ha támogatott)\n\n    console.log(`document.fonts?.status: ${document.fonts?.status}`);\n    if (document.fonts?.status === \"loading\") {\n        console.log(\"!!!\");\n    }\n    // if (document.fonts?.ready) {\n    //     try { await document.fonts.ready; } catch {}\n    // }\n\n    // 2) eredeti inline stílusok mentése\n    const prev = {\n        maxWidth: el.style.maxWidth,\n        whiteSpace: el.style.whiteSpace,\n        transform: el.style.transform,\n        display: el.style.display,\n    };\n\n    try {\n        // 3) mérési állapot\n        el.style.maxWidth   = 'none';\n        el.style.whiteSpace = 'nowrap';\n        // el.style.transform  = 'none'; // scale/rotate ne torzítson\n        el.style.display = 'inline-block';\n\n        // 4) reflow trigger (biztos ami biztos)\n        // eslint-disable-next-line no-unused-expressions\n        el.offsetWidth;\n\n        // // 5) mérés\n        // const wPx = window.getComputedStyle(el).width;\n        // console.log(`${el.id}: ${wPx}`);\n        // return convertToPt(`${wPx}`);\n        // 5) mérés\n        const wPx = el.getBoundingClientRect().width;\n        console.log(`${el.id}: ${wPx}`);\n        return convertToPt(`${wPx}px`);\n    } finally {\n        // 6) visszaállítás\n        el.style.maxWidth   = prev.maxWidth;\n        el.style.whiteSpace = prev.whiteSpace;\n        // el.style.transform  = prev.transform;\n        el.style.display = prev.display;\n    }\n}\n\n// function getElementBoxWidth (el) {\n//\n//     const computedStyle = window.getComputedStyle(el);\n//     const computedMaxWidth = computedStyle.getPropertyValue(\"maxWidth\");\n//     const computedWhiteSpace = computedStyle.getPropertyValue(\"whiteSpace\");\n//\n//     el.style.maxWidth = \"\";\n//     el.style.whiteSpace = \"nowrap\";\n//\n//     const boxWidth = convertToPt(el.getBoundingClientRect().width + \"px\");\n//\n//     el.style.maxWidth = computedMaxWidth;\n//     el.style.whiteSpace = computedWhiteSpace; //\n//\n//     return boxWidth;\n// }\n\n\nfunction getTextNodeLineCount(textNode) {\n    if (!textNode || textNode.nodeType !== Node.TEXT_NODE) return 0;\n\n    const range = document.createRange();\n    range.selectNodeContents(textNode);\n\n    // Ez egy NodeList-szerű objektum, minden rect egy sor vagy fragment\n    const rects = range.getClientRects();\n\n    return rects.length;\n}\n\nfunction getAllTextNodes(root) {\n    const walker = document.createTreeWalker(root, NodeFilter.SHOW_TEXT, null, false);\n    const out = [];\n    let n;\n    while ((n = walker.nextNode())) {\n        // üres/whitespace-only node-ok nem érdekelnek\n        if (n.nodeValue && n.nodeValue.trim().length) out.push(n);\n    }\n    return out;\n}\n\n/**\n * Sorok számát adja vissza bármilyen DOM node leszármazott textjeire.\n * A rect-eket top szerint csoportosítja (epsilon toleranciával),\n * így elkerüli a túl-számolást inline fragmentek miatt.\n */\nfunction getRenderedLineCountForNode(node, { epsilon = 0.5 } = {}) {\n    if (!node) return 0;\n\n    const rects = [];\n\n    // 1) gyűjtsük ki minden text node sor-fragment rectjeit\n    for (const tn of getAllTextNodes(node)) {\n        const range = document.createRange();\n        range.selectNodeContents(tn);\n        const rlist = range.getClientRects();\n        for (let i = 0; i < rlist.length; i++) {\n            const r = rlist[i];\n            // 0 szélességű/magasságú vagy display:none esetek kiszűrése\n            if (r.width > 0 && r.height > 0) {\n                rects.push({ top: r.top, bottom: r.bottom, left: r.left, right: r.right, height: r.height });\n            }\n        }\n    }\n\n    if (rects.length === 0) return 0;\n\n    // 2) top szerint rendezzük\n    rects.sort((a, b) => a.top - b.top);\n\n    // 3) klaszterezés top alapján (epsilon px tűrés)\n    let lines = 0;\n    let currentTop = rects[0].top;\n\n    for (const r of rects) {\n        if (Math.abs(r.top - currentTop) > epsilon) {\n            lines++;\n            currentTop = r.top;\n        }\n    }\n    // az első klaszter is számít:\n    return lines + 1;\n}\n\nfunction ensureFontsReady(interval = 50) {\n    return new Promise(resolve => {\n        function check() {\n            if (document.fonts && document.fonts.status === \"loaded\") {\n                resolve();\n            } else {\n                setTimeout(check, interval);\n            }\n        }\n        console.log(\"CHECK\");\n        check();\n    });\n}\n\n// function ensureFontsReady(run, interval) {\n//     interval = interval || 50;\n//\n//     function check() {\n//         if (document.fonts && document.fonts.status === \"loaded\") {\n//             run();\n//         } else {\n//             setTimeout(check, interval);\n//         }\n//     }\n//     check();\n// }\n\nexport {getElementBoxWidth, getTextNodeLineCount, getRenderedLineCountForNode, ensureFontsReady};","import convertToPt from \"../conversion\";\nimport {getElementBoxWidth} from \"../measurement\";\n\nconst elementsToSqueezeScaling = [];\n\nfunction getElementsToScaling () {\n    const squeezeElements = document.querySelectorAll('.squeeze-scaling');\n    const squeezeElementsWithParams = [];\n\n    // convert nodeList to array\n    for (var i=0; i<squeezeElements.length; i++) {\n        squeezeElementsWithParams.push(squeezeElements[i]);\n    }\n\n    return squeezeElementsWithParams;\n}\n\nfunction prepareElementsForScaling() {\n    const elements = getElementsToScaling();\n    elements.map(function (element, index) {\n\n        const maxWidth = window.getComputedStyle(element).maxWidth;\n        const maxFontSize = window.getComputedStyle(element).fontSize;\n        const currentWidth = window.getComputedStyle(element).width;\n\n        if (!maxWidth || !maxFontSize || maxWidth === \"none\" || maxFontSize === \"none\") {\n            return;\n        }\n\n        element.width = maxWidth;\n\n        const maxWidthPt = convertToPt(`${getElementBoxWidth(element)}px`);\n        // const maxWidthPt = (convertToPt(maxWidth) / 162) * 100;\n        // const maxWidthPt = convertToPt(maxWidth);\n        element.width = currentWidth;\n\n        const maxFontSizePt = convertToPt(maxFontSize);\n\n        const classArray = Array.from(element.classList);\n        const maxMatch = classArray.find(c => c.startsWith('max-scale-'))?.match(/^max-scale-\\[([^\\]]+)\\]$/);\n        const maxScale = maxMatch ? maxMatch[1] : null;\n        const minMatch = classArray.find(c => c.startsWith('min-scale-'))?.match(/^min-scale-\\[([^\\]]+)\\]$/);\n        const minScale = minMatch ? minMatch[1] : null;\n\n        elementsToSqueezeScaling[index] = {\n            element: elements[index],\n            maxWidthPt: maxWidthPt,\n            maxFontSizePt: maxFontSizePt,\n            maxScale: maxScale,\n            minScale: minScale,\n        };\n\n        element.style.transform = \"scale(1, 1)\";\n        element.style.transformOrigin = \"left center\";\n        element.style.display = \"inline-block\";\n        element.style.flex = \"0 0 auto\";\n        element.style.alignSelf = \"flex-start\";\n        element.style.maxWidth = \"\";\n        element.style.whiteSpace = \"nowrap\";\n\n    });\n}\n\n/**\n * A szöveg szélességét scale-lel illeszti a kívánt maxWidthPt-re.\n * - csak X irányban skáláz (alapértelmezés), Y-t 1-en hagyja\n * - pt-ben (printer world) számol, a style-ba px alapú scale kerül\n * - megtartja az eredeti transformot (előre teszi a scale-t)\n *\n * @param {HTMLElement} element   - a skálázandó elem\n * @param {number}      maxWidthPt- cél szélesség pt-ben\n * @param {object}      opts\n *    pxToPt=0.75       - 1px = 0.75pt (96 dpi)\n *    axis='x'          - 'x' | 'uniform'  ('uniform' esetén X=Y skála)\n *    minScale=0.2      - skála alsó korlát\n *    maxScale=5        - skála felső korlát\n *    epsilon=0.05      - engedett hiba (pt)\n *    maxIter=5         - legfeljebb ennyiszer finomít\n *    setOrigin=true    - bal szélre állítja a transform-origin-t\n *\n * @returns {number}    - a végső X scale érték\n */\nfunction calculateSqueezedScale(\n    element,\n    maxWidthPt,\n    {\n        pxToPt = 0.74999943307122,\n        axis = 'x',         // 'x' vagy 'uniform'\n        minScale = 0.2,\n        maxScale = 1,\n        epsilon = 0.05,\n        maxIter = 5,\n        setOrigin = true,\n    } = {}\n) {\n    const toPt = (px) => px * pxToPt;\n    const toPx = (pt) => pt / pxToPt;\n\n    // 1) Cél szélesség px-ben\n    const targetPt = maxWidthPt;\n    // const targetPx = toPx(maxWidthPt);\n\n    // 2) Eredeti transform elmentése, méréshez ideiglenesen kikapcsoljuk a skálát\n    const prevTransform = element.style.transform || '';\n    const prevOrigin = element.style.transformOrigin || '';\n\n    // a legegyszerűbb és legstabilabb: ideiglenesen 'none', hogy a nyers szélességet mérjük\n    element.style.transform = 'none';\n    if (setOrigin) element.style.transformOrigin = 'left center';\n\n    // 3) Nyers (skála nélküli) szélesség\n    const baseWidthPt = getElementBoxWidth(element) || 0;\n    // const baseWidthPx = element.getBoundingClientRect().width || 0;\n    if (baseWidthPt <= 0) {\n        // nincs értelmezhető szélesség – ne robbanjon\n        element.style.transform = prevTransform;\n        element.style.transformOrigin = prevOrigin;\n        return 1;\n    }\n\n    // 4) Első becslés: arányos skála\n    let sx = clamp(targetPt / baseWidthPt, minScale, maxScale);\n    console.log(`sx1: ${sx}`);\n    let sy = (axis === 'uniform') ? sx : 1;\n\n    // alkalmazzuk: a scale-t előre tesszük, a meglévő transform megmarad\n    element.style.transform = `scale(${sx}, ${sy})`.trim();\n    // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n\n    // 5) Finomhangolás (iteratív, gyors konvergencia)\n    for (let i = 0; i < maxIter; i++) {\n        const w = getElementBoxWidth(element);\n        // const w = element.getBoundingClientRect().width;\n        const diffPt = targetPt - w;\n        if (Math.abs(diffPt) <= epsilon) break;\n\n        // multiplikatív korrekció: új sx = régi sx * (cél / mért)\n        const factor = targetPt / (w || 1);\n        sx = clamp(sx * factor, minScale, maxScale);\n        console.log(`w: ${w} - sx2: ${sx}`);\n        sy = (axis === 'uniform') ? sx : 1;\n        element.style.transform = `scale(${sx}, ${sy})`.trim();\n        // element.style.transform = `scale(${sx}, ${sy}) ${prevTransform}`.trim();\n    }\n\n    // (opcionális) ha nem akarsz origin-t hagyni:\n    if (!setOrigin) element.style.transformOrigin = prevOrigin;\n\n    console.log(`sx3: ${sx}`);\n    return sx;\n\n    function clamp(v, lo, hi) { return Math.max(lo, Math.min(hi, v)); }\n}\n\n\n\nfunction squeezeScale(s) {\n\n    const originalLetterSpacing = parseFloat(window.getComputedStyle(s.element).letterSpacing) || 0;\n\n    const newScale = calculateSqueezedScale(\n        s.element,\n        s.maxWidthPt,\n        // getElementBoxWidth(s.element),\n        // originalLetterSpacing\n    );\n\n    const maxScale = s.maxScale ?? newScale;\n    const minScale = s.minScale ?? newScale;\n    const finalScale = Math.max(Math.min(newScale, Number(maxScale)), Number(minScale));\n    const finalScaleString = `scale(${finalScale}, 1)`;\n\n    s.element.style.transform = finalScaleString;\n    s.element.style.maxWidth = s.maxWidth + \"pt\";\n}\n\n\nfunction squeezeAllScaling() {\n    for (var i in elementsToSqueezeScaling) {\n        squeezeScale(elementsToSqueezeScaling[i]);\n    }\n}\n\nexport { prepareElementsForScaling, squeezeAllScaling };\n","import logInfo from \"./log-info\";\nimport {ensureFontsReady} from \"./measurement\";\nimport {prepareElementsForScaling, squeezeAllScaling} from \"./squeeze/squeeze-scaling\";\n\nlet templateScripts = () => {}\n\nconst setTemplateScripts = (scripts) => {\n    templateScripts = scripts;\n}\n\nfunction scriptFromTheTemplate() {\n    // logInfo(\"scriptFromTheTemplate\");\n    // replace by the scriptFromTheTemplate\n}\n\nfunction renderTemplate(data, templateId, orderLineUuid, options, sendData) {\n\n    const sourceNode = document.getElementById('entry-template');\n\n    if (!sourceNode) {\n        return false;\n    }\n\n    const source = sourceNode.innerHTML;\n\n    // Wrap each string property in SafeString\n    const safeData = JSON.parse(JSON.stringify(data), (key, value) =>\n        typeof value === 'string' ? value.replace(/\\\\n/g, \"<br />\") : value\n    );\n\n    var renderer = Twig.twig({\n        data: source\n    });\n\n    const html = renderer.render(safeData);\n\n    document.getElementsByTagName('body')[0].outerHTML = html;\n\n    ensureFontsReady().then(() => {\n        console.log(\"Betöltődtek a fontok! 2\");\n        scriptFromTheTemplate();\n        templateScripts();\n    })\n\n    if (sendData) {\n        window.parent.postMessage({source: \"template-processor\", html: html, data: data, templateId: templateId, orderLineUuid: orderLineUuid, options: options}, \"*\");\n    }\n\n    return true;\n}\n\nfunction zoom(ratio) {\n    const scale = ratio + \" \" + ratio;\n    document.getElementsByTagName('body')[0].style.scale = ratio;\n}\n\nexport {renderTemplate, setTemplateScripts, zoom};\n","\nfunction smartCaps() {\n\n    const ignore = [\n        \"rue\", \"avenue\", \"impasse\", \"allée\", \"boulevard\", \"place\", \"route\", \"voie\", \"de\", \"la\", \"le\", \"les\", \"lès\", \"au\", \"aux\", \"du\", \"quai\", \"promenade\", \"chemin\", \"sentier\", \"passage\", \"square\", \"cours\", \"traverse\", \"piétonne\", \"résidence\", \"esplanade\", \"rond-point\", \"carrefour\", \"giratoire\", \"faubourg\", \"cour\", \"courtil\", \"clos\", \"cité\", \"villa\", \"hameau\", \"lieu-dit\", \"lotissement\", \"enclos\", \"chaussée\", \"parvis\", \"digue\", \"port\", \"berges\", \"traboule\", \"estrade\", \"estay\", \"rampe\", \"immeuble\", \"batiment\", \"bâtiment\"\n    ];\n\n    function getTextNodesInSmartCap(root = document) {\n        const result = [];\n        const elements = root.querySelectorAll('.smartCap');\n\n        elements.forEach(el => {\n            const walker = document.createTreeWalker(el, NodeFilter.SHOW_TEXT);\n            let node;\n            while ((node = walker.nextNode())) {\n                const text = node.nodeValue;\n                if (text.trim().length > 0) {\n                    node.nodeValue = text.replace(/\\w\\S*/g, function (word) {\n                        const lower = word.toLowerCase();\n                        if (ignore.includes(lower)) {\n                            return word;\n                        }\n\n                        if (lower.startsWith(\"d'\") || lower.startsWith(\"l'\")) {\n                            const prefix = lower.slice(0, 2); // \"d'\" or \"l'\"\n                            const rest = lower.slice(2);\n                            return prefix + rest.charAt(0).toUpperCase() + rest.slice(1);\n                        }\n\n                        return word.charAt(0).toUpperCase() + word.slice(1);\n                    });\n                    result.push(node);\n                }\n            }\n        });\n\n        return result;\n    }\n\n    const smartCapsNodeList = getTextNodesInSmartCap();\n    const smartCaps = Array.from(smartCapsNodeList);\n\n    smartCaps.forEach(smartCap => {\n        // logInfo(smartCap);\n    })\n}\n\nexport default smartCaps;","import handleSeparators from \"./separator\";\nimport { prepareElements, squeezeAll } from \"./squeeze/squeeze-font-size\";\nimport { prepareElementsForLetterSpacing, squeezeAllLetterSpacing } from \"./squeeze/squeeze-letter-spacing\";\nimport { prepareElementsForScaling, squeezeAllScaling } from \"./squeeze/squeeze-scaling\";\nimport {ensureFontsReady} from \"./measurement\";\n\nfunction runSqueeze() {\n    console.log(\"SQUEEZING\");\n\n    ensureFontsReady().then(() => {\n        console.log(\"Betöltődtek a fontok! 3\");\n        // prepareElements();\n        // prepareElementsForLetterSpacing();\n        prepareElementsForScaling();\n\n        // squeezeAll();\n        // squeezeAllLetterSpacing();\n        squeezeAllScaling();\n\n        // handleSeparators();\n    })\n\n\n}\n\nexport default runSqueeze;","import {renderTemplate, zoom} from \"./render-template\";\nfunction addPostMessageHandler() {\n    window.addEventListener('message', (event) => {\n        // console.log('Message received from parent:', event.data);\n\n        const sourceNode = document.getElementById('entry-template');\n\n        if (!event.data.data || !sourceNode) {\n            return;\n        }\n\n        const data = {};\n        Object.keys(event.data.data).map((key) => {\n            if (Array.isArray(event.data.data[key]) && (event.data.data[key].length > 0)) {\n                data[key] = event.data.data[key][0].label;\n            } else {\n                data[key] = event.data.data[key];\n            }\n        });\n\n        if (event.data.msgId === \"dataChanged\") {\n            renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, false);\n            zoom(event.data.zoom / 100);\n        }\n\n        if (event.data.msgId === \"getRenderedMarkup\") {\n            renderTemplate(data, event.data.templateId, event.data.orderLineUuid, event.data.options, true);\n            zoom(event.data.zoom / 100);\n        }\n\n        if (event.data.msgId === \"zoom\") {\n            zoom(event.data.data / 100);\n        }\n\n    });\n}\n\nexport {addPostMessageHandler};","import handleSeparators from \"./separator.js\";\nimport {renderTemplate, setTemplateScripts} from \"./render-template\";\nimport smartCaps from \"./smart-caps\";\nimport runSqueeze from \"./squeeze\";\nimport {addPostMessageHandler} from \"./post-msg-handler\";\n\nconst templateScripts = () => {\n    smartCaps();\n    runSqueeze();\n    handleSeparators();\n}\n\nfunction addPodScripts(data) {\n\n    function init(data) {\n\n        setTemplateScripts(templateScripts);\n\n        addPostMessageHandler();\n\n        document.fonts?.addEventListener?.('loading', (e) => {\n            console.log('[fonts] loading…', e);\n        });\n        document.fonts?.addEventListener?.('loadingdone', (e) => {\n            console.log('[fonts] loading done');\n            e.fontfaces?.forEach(ff => {\n                console.log('  family:', ff.family,\n                    'style:', ff.style,\n                    'weight:', ff.weight,\n                    'stretch:', ff.stretch,\n                    'status:', ff.status);\n            });\n        });\n        document.fonts?.addEventListener?.('loadingerror', (e) => console.warn('[fonts] error', e));\n\n        const rendered = renderTemplate(data);\n        // const rendered = renderTemplate({});\n\n        if (!rendered) {\n            templateScripts();\n        }\n    }\n\n    document.addEventListener(\"DOMContentLoaded\", async (event) => {\n\n        ensureFontsReady(function () {\n            console.log(\"Betöltődtek a fontok! 1\");\n            init(data);\n        }, 50);\n    });\n\n    window.__PROCESSING_DONE__ = true;\n}\n\n/**\n * Meghívja a run() függvényt, amint a dokumentum fontjai betöltődtek.\n * Nem használ async/await-et, csak setTimeout-ot.\n *\n * @param {Function} run    - a te indító függvényed\n * @param {number} interval - milliszekundumok két próbálkozás között (alap: 50ms)\n */\nfunction ensureFontsReady(run, interval) {\n    interval = interval || 50;\n\n    function check() {\n        if (document.fonts && document.fonts.status === \"loaded\") {\n            run();\n        } else {\n            setTimeout(check, interval);\n        }\n    }\n    check();\n}\n\nexport default addPodScripts;"],"names":["handleSeparators","results","Array","from","document","querySelectorAll","map","el","m","className","match","element","value","filter","Boolean","forEach","_ref","textNodes","getAllTextNodes","node","wrapMatchesWithSeparatorAndSegments","separatorNodeList","separators","separator","next","nextElementSibling","prev","previousElementSibling","nextInNewLine","prevInNewLine","getYCoordinate","style","visibility","display","root","walker","createTreeWalker","NodeFilter","SHOW_TEXT","nodes","n","nextNode","push","textNode","_textNode$parentNode","text","nodeValue","valLen","length","idx","indexOf","frag","createDocumentFragment","start","before","slice","beforeTrim","trim","spanBefore","createElement","textContent","appendChild","createTextNode","sep","after","afterTrim","_after$match$","_after$match","_after$match$2","_after$match2","leadingWs","trailingWs","spanAfter","parentNode","replaceChild","getBoundingClientRect","top","convertToPt","size","dpi","pointsPerInch","conversionFactors","pt","px","mm","cm","in","pc","em","rem","Error","parseFloat","unit","toLowerCase","getElementBoxWidth","_document$fonts","_document$fonts2","Element","console","log","concat","fonts","status","maxWidth","whiteSpace","transform","offsetWidth","wPx","width","id","ensureFontsReady","interval","arguments","undefined","Promise","resolve","check","setTimeout","elementsToSqueezeScaling","getElementsToScaling","squeezeElements","squeezeElementsWithParams","i","prepareElementsForScaling","elements","index","_classArray$find","_classArray$find2","window","getComputedStyle","maxFontSize","fontSize","currentWidth","maxWidthPt","maxFontSizePt","classArray","classList","maxMatch","find","c","startsWith","maxScale","minMatch","minScale","transformOrigin","flex","alignSelf","calculateSqueezedScale","pxToPt","_ref$axis","axis","_ref$minScale","_ref$maxScale","_ref$epsilon","epsilon","_ref$maxIter","maxIter","_ref$setOrigin","setOrigin","targetPt","prevTransform","prevOrigin","baseWidthPt","sx","clamp","sy","w","diffPt","Math","abs","factor","v","lo","hi","max","min","squeezeScale","s","_s$maxScale","_s$minScale","letterSpacing","newScale","finalScale","Number","finalScaleString","squeezeAllScaling","templateScripts","setTemplateScripts","scripts","renderTemplate","data","templateId","orderLineUuid","options","sendData","sourceNode","getElementById","source","innerHTML","safeData","JSON","parse","stringify","key","replace","renderer","Twig","twig","html","render","getElementsByTagName","outerHTML","then","parent","postMessage","zoom","ratio","scale","smartCaps","ignore","getTextNodesInSmartCap","result","word","lower","includes","prefix","rest","charAt","toUpperCase","smartCapsNodeList","smartCap","runSqueeze","addPostMessageHandler","addEventListener","event","Object","keys","isArray","label","msgId","addPodScripts","init","_document$fonts$addEv","_document$fonts2$addE","_document$fonts3","_document$fonts3$addE","call","e","_e$fontfaces","fontfaces","ff","family","weight","stretch","warn","rendered","_asyncToGenerator","_regenerator","_callee","_context","a","_x","apply","__PROCESSING_DONE__","run"],"mappings":"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"}